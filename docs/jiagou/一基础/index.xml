<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一、基础 on 笔记本</title>
    <link>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 一、基础 on 笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1.架构定义</title>
      <link>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/1.%E6%9E%B6%E6%9E%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/1.%E6%9E%B6%E6%9E%84%E5%AE%9A%E4%B9%89/</guid>
      <description>1.架构定义 系统vs子系统定义  系统: 泛指由一群有关联的个体组成，根据某种规则运作，能完成个别元件不能单独完成的工作的群体。它的意思 是“总体”“整体”或“联盟”。&amp;ndash; 来自《维基百科》 子系统: 由一群有关联的个体所组成的系统，多半会是更大系统中的一部分。&amp;ndash; 来自《维基百科》  关联(一群有关联的个体) + 规则(个体之间按照规则运行) + 能力(系统能力超越个体能力) + 分层(自顶向下逐层分解)
模块vs组件定义   软件模块:是一套一致而互相有紧密关连的软件组织。它分别包含了程序和数据结构两部分。现代软件开发往往利用模 块作为合成的单位。模块的接口表达了由该模块提供的功能和调用它时所需的元素。模块是可能分开被编写 的单位。这使它们可再用和允许人员同时协作、编写及研究不同的模块。&amp;ndash; 来自《维基百科》
  软件组件:自包含的、可编程的、可重用的、与语言无关的软件单元，软件组件可以很容易被用于组装应用程序中。&amp;ndash; 来自《维基百科》
  系统: ** 逻辑拆分 -&amp;gt; 模块(课程模块、成绩模块) -&amp;gt; 职责分离 ** 物理拆分 -&amp;gt; 组件(Nginx服务器、Mysql服务器) -&amp;gt; 单元复用
  架构vs框架定义   软件框架: 通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个软件组件规范时， 提供规范所要求之基础功能的软件产品。 &amp;ndash; 来自《维基百科》
  软件架构: 指软件系统的“基础结构”，创造这些基础结构的准则，以及对这些结构的描述。&amp;ndash; 来自《维基百科》
  软件框架（Framework）: 组件规范、软件产品
  软件架构（Architecture）: 结构、准则、描述
  重新定义架构 软件架构: 软件架构指软件系统的顶层结构，它定义了系统由哪些角色（Role）组成，角色之间的关系 （Relation）和运作规则（Rule）。 [4R架构 – Rank + Role + Relation + Rule]</description>
    </item>
    
    <item>
      <title>2.如何画出优秀的架构图</title>
      <link>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/2.%E5%A6%82%E4%BD%95%E7%94%BB%E5%87%BA%E4%BC%98%E7%A7%80%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/2.%E5%A6%82%E4%BD%95%E7%94%BB%E5%87%BA%E4%BC%98%E7%A7%80%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid>
      <description>2.如何画出优秀的架构图 4+1架构视图–定义  逻辑视图：系统提供给用户的功能，对应UML的 class和statediagrams 处理视图：系统的处理过程，对应UML的 sequence 和 activity diagrams 开发视图：程序员角度看系统的逻辑组成，对应UML的 package diagrams 物理视图：系统工程师角度看系统的物理组成，对应UML的 deployment diagrams 场景视图：用户角度看系统需要实现的需求，对应UML的 use case diagrams  大厂架构图分类    </description>
    </item>
    
    <item>
      <title>3.什么是面向复杂度架构设计</title>
      <link>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/3.%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/3.%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>3.什么是面向复杂度架构设计 架构设计方法论    面向模式软件架构  核心思想：应用经过验证的成熟 架构模式 ，例如MVC、Reactor等 核心问题：知道模式，但是不知道什么时候用哪个模式 太庞大，且比较理论化，看起来比较累  风险驱动架构设计  核心思想：根据系统 风险 大小来设计软件架构 核心问题：风险是一种概率预判，“ 一切皆有可能 ” 建模部分的内容本质是 面向对象 设计的建模过程  DDD和整洁架构  DDD是可扩展架构的设计技巧，不是架构方法论 DDD兼顾架构设计和方案设计，大部分人会搞混 DDD、敏捷架构不关注存储和计算，只关注业务  面向复杂度 为什么做架构设计？  因为架构很重要，所以要做架构设计 为了提升开发效率，为了促进业务发展 公司流程要求系统开发过程中必须有架构设计 为了高性能、高可用、可扩展，所以要做架构设计  面向复杂度的架构设计  本质:架构设计是为了降低软件系统的复杂度
→怎么做架构设计 思路:通过分析系统需求找到系统复杂的地方，然后设计方案
→有哪些复杂度 模式:复杂度来源：高性能、高可用、可扩展、安全、成本……
→怎么降低复杂度 套路:分库分表、缓存、集群、分片、微服务、DDD、异地多活……  架构设计环    </description>
    </item>
    
    <item>
      <title>4.如何做好架构设计</title>
      <link>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/4.%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/jiagou/%E4%B8%80%E5%9F%BA%E7%A1%80/4.%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>4.如何做好架构设计 脚骨设计原则的意义    架构设计三原则 合适原则    简单原则  奥卡姆剃刀：若无必要，勿增实体 复杂度：内部复杂度、外部复杂度    演化原则   演进的目的：传承基因，适应变化  架构设计原则具体应用  设计出来的架构要满足当时的业务需要，符合团队和技术的能力水平（合适原则） 先按照简单的方式来设计架构，然后不断地在实际应用过程中迭代优化（简单原则） 当业务发生变化时，架构要扩展、重构，甚至重写（演化原则）  架构设计三原则的优先级是怎样的？
架构设计原则常见判断维度  本节思维导图  </description>
    </item>
    
  </channel>
</rss>