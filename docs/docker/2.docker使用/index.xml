<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2.Docker使用 on 真努力与假努力</title>
    <link>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/</link>
    <description>Recent content in 2.Docker使用 on 真努力与假努力</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.1.常用命令</title>
      <link>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.1.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.1.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>2.1.常用命令 镜像相关命令 查看镜像 docker images 搜索镜像 docker search centos 镜像拉取 docker pull centos:7 删除镜像 # 按镜像id删除镜像 docker rmi 镜像id(imageId) # 删除所有镜像 docker rmi `docker images -q` 容器相关命令 查看容器 # 查看正在运行的容器 docker ps # 查看所有容器 docker ps -a # 查看最后一次运行的容器 docker ps -l # 查看停止的容器 docker ps -f status=exited 创建与启动容器 创建容器常用的参数说明:
创建容器命令:
docker run  -i: 表示运行容器 -t: 表示容器启动后进入其命令行。加入这个两个参数后, 容器创建就能登录进去。即分配一个伪终端 &amp;ndash;name: 为创建的容器命名 -v: 表示目录映射关系(前者是宿主机目录,后者是映射到宿主机上的目录), 可以使用多个v做多个目录或文件映射.注意: 最好做目录映射,在宿主机上做修改,然后共享到容器上。 -d:在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器,如果只加-i-t两个参数，创建后就会自动进去容器)。 -p: 表示端口映射,前者是宿主机端口,后者是容器内的映射端口,可以使用多个-p做多个端口映射 更多参数执行: docker run &amp;ndash;help 查看  1.</description>
    </item>
    
    <item>
      <title>2.2.应用部署样例</title>
      <link>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.2.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E6%A0%B7%E4%BE%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.2.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E6%A0%B7%E4%BE%8B/</guid>
      <description>2.2.应用部署样例 https://www.bilibili.com/video/BV1tK411A7iQ?p=10</description>
    </item>
    
    <item>
      <title>2.3.迁移与备份</title>
      <link>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.3.%E8%BF%81%E7%A7%BB%E4%B8%8E%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.3.%E8%BF%81%E7%A7%BB%E4%B8%8E%E5%A4%87%E4%BB%BD/</guid>
      <description>2.3.迁移与备份 容器保存为镜像 语法: docker commit 容器名称|容器id 镜像 docker commit redis myredis 镜像备份 我们可以通过以下命令将镜像保存为tar文件
docker save -o myredis.tar myredis 镜像恢复与迁移 首先我们先删除掉myredis镜像,然后执行此命令恢复
docker load -i myredis.tar  -i 输入的文件
执行后再次查看镜像,可以看到镜像已经恢复  </description>
    </item>
    
    <item>
      <title>2.4.Dockerfile</title>
      <link>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.4.dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.4.dockerfile/</guid>
      <description>2.4.Dockerfile Dockerfile是由一系列命令和参数构成的脚本,这些命令应用于基础镜像并最终创建一个新的镜像
   命令 作用     FROM image_name:tag 定义了使用哪个基础镜像启动构建流程   MAINTAINER user_name 声明镜像的创建者   ENV key value 设置环境变量(可以写多条)   RUN command 是Dockfile的核心部分(可以写多条)   ADD source_dir/file_dest_dir/file 将宿主机的文件复制到容器内, 如果是一个压缩文件，将会在复制后自动解压   COPY source_dir/file_desc_dir/file 和ADD相似, 但是如果有压缩文件并不能解压   WORKDIR path_dir 设置工作目录    构建命令 docker build -t=&#39;jdk1.8&#39; #构建名为jdk1.8 </description>
    </item>
    
    <item>
      <title>2.5.Docker私有仓库</title>
      <link>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.5.docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.5.docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</guid>
      <description>2.5.Docker私有仓库 私有仓库搭建与配置 拉取私有仓库镜像
docker pull registry 启动私有仓库容器
docker run -di --name=registry -p 5000:5000 registry 打开终端输入: curl http://127.0.0.1:5000/v2/_catalog 看到{&amp;ldquo;repositories&amp;rdquo;:[]}表示私有仓库搭建成功并且内容为空
修改daemon.json
vim /etc/docker/daemon.json 添加以下内容,保存退出
{ &amp;quot;insecure-registries&amp;quot;: [&amp;quot;127.0.0.1:5000&amp;quot;] } 此步用于docker信任私有仓库地址
重启docker服务
systemctl restart docker 私有仓库镜像上传 docker tag 镜像名称 # docker tag centosofme 127.0.0.1:5000/centosofme # docker images REPOSITORY TAG IMAGE ID CREATED SIZE 127.0.0.1:5000/centosofme latest 30615ec12063 5 hours ago 204MB centosofme latest 30615ec12063 5 hours ago 204MB centos 7 8652b9f0cb4c # docker push 127.0.0.1:5000/centosofme # curl http://127.</description>
    </item>
    
    <item>
      <title>2.6.DockerMaven插件</title>
      <link>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.6.dockermaven%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/docker/2.docker%E4%BD%BF%E7%94%A8/2.6.dockermaven%E6%8F%92%E4%BB%B6/</guid>
      <description>2.6.DockerMaven插件 微服务部署有两种方法:
 手动部署: 首先基于源码打包生成jar包, (或war包), 将jar包上传至虚拟机并拷贝到JDK容器 通过Maven插件自动部署  修改宿主机的docker配置,让其可以远程访问 vim /lib/systemd/system/docker.service 修改以ExecStart开头的行
ExecStart= ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375 刷新一下配置
systemctl daemon-reload systemctl restart docker docker start registry </description>
    </item>
    
  </channel>
</rss>