<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>坚持:多读书</title>
    <link>https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
    <description>Recent content on 坚持:多读书</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1.1.安装</title>
      <link>https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.1.%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.1.%E5%AE%89%E8%A3%85/</guid>
      <description>1.1.安装 linux 下安装  wget https://dl.google.com/go/go1.x.x.linux-amd64.tar.gz 下载安装包 tar -C /usr/local -zxvf go1.x.x.linux-amd64.tar.gz 添加/usr/loacl/go/bin目录到PATH变量中。添加到/etc/profile 或$HOME/.profile都可以  vim /etc/profile export GOROOT=/usr/local/go #设置为go安装的路径,有些安装包会自动设置默认的goroot export GOPATH=/usr/local/goprojects/ #GO项目路径多个用&amp;rsquo;,&amp;lsquo;分开 export PATH=$PATH:$GOROOT/bin:$GOPATH/bin #加载 source /etc/profile   执行go version，如果现实版本号，则Go环境安装成功.  </description>
    </item>
    
    <item>
      <title>1.2.国内镜像配置</title>
      <link>https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.2.%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.2.%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</guid>
      <description>1.2.国内镜像配置 Go 1.13及以上(推荐) 打开你的终端并执行: go env -w GOPROXY=https://goproxy.cn,direct  Go module 打开你的终端并执行: go env -w GO111MODULE=on  go imports go imports包的引入可以让代码书写变得更加快捷 $ go get -v golang.org/x/tools/cmd/goimports  </description>
    </item>
    
    <item>
      <title>1.3.依赖管理</title>
      <link>https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.3.%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/1.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.3.%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</guid>
      <description>1.3.依赖管理 依赖管理的三个阶段: GOPATH, GOVENDOR, go mod
GOPATH 默认在~/go
go mod的使用 使用intelij Idea创建项目  打开Intelij Idea, File-&amp;gt;new-&amp;gt;project 选择Go MOdules(vgo), 将Proxy: 改为https://goproxy.cn,direct 打开ide的terminal输入go env查看GO111MODULE是否为on，和查看GOPROXY是否为: https://goproxy.cn,direct 继续在terminal输入: go get -u go.uber.org/zap  获取某个固定版本: go get -u go.uber.org/zap@1.11
获取最新的版本: go get -u go.uber.org/zap
清洁: go mod tidy
增加依赖：
1. go get
2. 代码直接写, 点run的时候自动下载
go build ./...  迁移到go mod go mod init modtest2 go build ./... 增加依赖 go get  总结  由go命令统一的管理, 用户不必关心目录结构 初始化: go mode init [名称] 增加依赖: go get 或者 直接写代码,在build的时候把依赖加进去 更新依赖: go get [@v&amp;hellip;], go mod tidy # 不加@v表示拿最新版本 将旧项目迁移到go mod: go mod init, go build .</description>
    </item>
    
  </channel>
</rss>