<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>没事写写笔记</title>
    <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
    <description>Recent content on 没事写写笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.4.1.if</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.1.if/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.1.if/</guid>
      <description>2.4.1.if(分支结构).md if条件判断基本写法 Go语言中if条件判断的格式如下：
if 表达式1 { 分支1 } else if 表达式2 { 分支2 } else{ 分支3 } 当表达式1的结果为true时，执行分支1，否则判断表达式2，如果满足则执行分支2，都不满足时，则执行分支3。 if判断中的else if和else都是可选的，可以根据实际需要进行选择。
Go语言规定与if匹配的左括号{必须与if和表达式放在同一行，{放在其他位置会触发编译错误。 同理，与else匹配的{也必须与else写在同一行，else也必须与上一个if或else if右边的大括号在同一行。
举个例子：
func ifDemo1() { score := 65 if score &amp;gt;= 90 { fmt.Println(&amp;quot;A&amp;quot;) } else if score &amp;gt; 75 { fmt.Println(&amp;quot;B&amp;quot;) } else { fmt.Println(&amp;quot;C&amp;quot;) } } if条件判断特殊写法 if条件判断还有一种特殊的写法，可以在 if 表达式之前添加一个执行语句，再根据变量值进行判断，举个例子：
func ifDemo2() { if score := 65; score &amp;gt;= 90 { fmt.Println(&amp;quot;A&amp;quot;) } else if score &amp;gt; 75 { fmt.</description>
    </item>
    
    <item>
      <title>2.4.2.for</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.2.for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.2.for/</guid>
      <description>2.4.2.for(循环结构) Go 语言中的所有循环类型均可以使用for关键字来完成。
for循环的基本格式如下：
for 初始语句;条件表达式;结束语句{ 循环体语句 } 条件表达式返回true时循环体不停地进行循环，直到条件表达式返回false时自动退出循环。
func forDemo() { for i := 0; i &amp;lt; 10; i++ { fmt.Println(i) } } for循环的初始语句可以被忽略，但是初始语句后的分号必须要写，例如：
func forDemo2() { i := 0 for ; i &amp;lt; 10; i++ { fmt.Println(i) } } for循环的初始语句和结束语句都可以省略，例如：
func forDemo3() { i := 0 for i &amp;lt; 10 { fmt.Println(i) i++ } } 这种写法类似于其他编程语言中的while，在while后添加一个条件表达式，满足条件表达式时持续循环，否则结束循环。
无限循环 for { 循环体语句 } for循环可以通过break、goto、return、panic语句强制退出循环。
for range(键值循环) Go语言中可以使用for range遍历数组、切片、字符串、map 及通道（channel）。 通过for range遍历的返回值有以下规律：</description>
    </item>
    
    <item>
      <title>2.4.2.switch</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.3.switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.3.switch/</guid>
      <description>2.4.3.switch 使用switch语句可方便地对大量的值进行条件判断。
func switchDemo1() { finger := 3 switch finger { case 1: fmt.Println(&amp;quot;大拇指&amp;quot;) case 2: fmt.Println(&amp;quot;食指&amp;quot;) case 3: fmt.Println(&amp;quot;中指&amp;quot;) case 4: fmt.Println(&amp;quot;无名指&amp;quot;) case 5: fmt.Println(&amp;quot;小拇指&amp;quot;) default: fmt.Println(&amp;quot;无效的输入！&amp;quot;) } } Go语言规定每个switch只能有一个default分支。
一个分支可以有多个值，多个case值中间使用英文逗号分隔。
func testSwitch3() { switch n := 7; n { case 1, 3, 5, 7, 9: fmt.Println(&amp;quot;奇数&amp;quot;) case 2, 4, 6, 8: fmt.Println(&amp;quot;偶数&amp;quot;) default: fmt.Println(n) } } 分支还可以使用表达式，这时候switch语句后面不需要再跟判断变量。例如：
func switchDemo4() { age := 30 switch { case age &amp;lt; 25: fmt.</description>
    </item>
    
    <item>
      <title>2.4.4.goto</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.4.goto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.4.goto/</guid>
      <description>2.4.4.goto(跳转到指定标签) goto语句通过标签进行代码间的无条件跳转。goto语句可以在快速跳出循环、避免重复退出上有一定的帮助。Go语言中使用goto语句能简化一些代码的实现过程。 例如双层嵌套的for循环要退出时：
func gotoDemo1() { var breakFlag bool for i := 0; i &amp;lt; 10; i++ { for j := 0; j &amp;lt; 10; j++ { if j == 2 { // 设置退出标签 breakFlag = true break } fmt.Printf(&amp;quot;%v-%v\n&amp;quot;, i, j) } // 外层for循环判断 if breakFlag { break } } } 使用goto语句能简化代码：
func gotoDemo2() { for i := 0; i &amp;lt; 10; i++ { for j := 0; j &amp;lt; 10; j++ { if j == 2 { // 设置退出标签 goto breakTag } fmt.</description>
    </item>
    
    <item>
      <title>2.4.5.break</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.5.break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.5.break/</guid>
      <description>2.4.5.break(跳出循环) break语句可以结束for、switch和select的代码块。
break语句还可以在语句后面添加标签，表示退出某个标签对应的代码块，标签要求必须定义在对应的for、switch和 select的代码块上。 举个例子：
func breakDemo1() { BREAKDEMO1: for i := 0; i &amp;lt; 10; i++ { for j := 0; j &amp;lt; 10; j++ { if j == 2 { break BREAKDEMO1 } fmt.Printf(&amp;quot;%v-%v\n&amp;quot;, i, j) } } fmt.Println(&amp;quot;...&amp;quot;) } </description>
    </item>
    
    <item>
      <title>2.4.6.continue</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.6.continue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.6.continue/</guid>
      <description>2.4.6.continue(继续下次循环) continue语句可以结束当前循环，开始下一次的循环迭代过程，仅限在for循环内使用。
在 continue语句后添加标签时，表示开始标签对应的循环。例如：
func continueDemo() { forloop1: for i := 0; i &amp;lt; 5; i++ { // forloop2: for j := 0; j &amp;lt; 5; j++ { if i == 2 &amp;amp;&amp;amp; j == 2 { continue forloop1 } fmt.Printf(&amp;quot;%v-%v\n&amp;quot;, i, j) } } } </description>
    </item>
    
  </channel>
</rss>