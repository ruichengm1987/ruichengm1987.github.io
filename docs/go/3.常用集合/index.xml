<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3.常用结合 on 笔记本</title>
    <link>https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/</link>
    <description>Recent content in 3.常用结合 on 笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3.1.数组和切片</title>
      <link>https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/3.1.%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/3.1.%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid>
      <description>3.1.数组和切片 数组  数组的声明  var a [3]int // 声明并初始化为默认零值 a[0] = 1 b := [3]int{1, 2, 3} // 声明同时初始化 c := [2][2]int{{1, 2}, {3, 4}} // 多维数组初始化  数组元素遍历  func TestTravelArray(t *testing.T) { a := [...]int{1, 2, 3, 4, 5} // 不指定元素个数 for idx/*索引*/, elem/*元素*/ := range a { fmt.Println(idx, elem) } }  数组截取 a[开始索引(包含), 结束索引(不包含)]  a := [...]int{1, 2, 3, 4, 5} a[1:2] //2 a[1:3] //2,3 a[1:len(a)] // 2, 3, 4, 5 a[1:] // 2, 3, 4, 5 a[:3] // 1, 2, 3 切片   切片内部结构    切片声明</description>
    </item>
    
    <item>
      <title>3.2.map声明元素访问及便利</title>
      <link>https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/3.2.map%E5%A3%B0%E6%98%8E%E5%85%83%E7%B4%A0%E8%AE%BF%E9%97%AE%E5%8F%8A%E9%81%8D%E5%8E%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/3.2.map%E5%A3%B0%E6%98%8E%E5%85%83%E7%B4%A0%E8%AE%BF%E9%97%AE%E5%8F%8A%E9%81%8D%E5%8E%86/</guid>
      <description>3.2.map声明元素访问及便利  声明  m := map[string]int{&amp;quot;one&amp;quot;: 1, &amp;quot;two&amp;quot;: 2, &amp;quot;three&amp;quot;: 3} m1 := map[string]int{} m1[&amp;quot;one&amp;quot;] = 1 m2 := make(map[String]int, 10 /*Initial Capacity*/)  Map元素的访问 在访问的key不存在时,仍会返回零值,不能通过返回nil来判断元素是否存在  if v, ok := m1[3]; ok { t.Logf(&amp;quot;key 3 is %d&amp;quot;, v) } else { t.Log(&amp;quot;key 3 is existing&amp;quot;) }  Map遍历  </description>
    </item>
    
    <item>
      <title>3.3.Map与工厂模式,在go语言中实现set</title>
      <link>https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/3.3.map%E4%B8%8E%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%9C%A8go%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%AE%9E%E7%8E%B0set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/3.%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/3.3.map%E4%B8%8E%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%9C%A8go%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%AE%9E%E7%8E%B0set/</guid>
      <description>3.3.Map与工厂模式,在go语言中实现set Map与工厂模式  Map的value可以是一个方法 与Go的Dock type接口方式一起,可以方便的实现单一方法对象的工厂模式  实现set go的内置集合中没有set实现, 可以map[type]bool
 1.元素的唯一性 2.基本操作  1.添加元素 2.判断元素是否存在 3.删除元素 4.元素个数    </description>
    </item>
    
  </channel>
</rss>