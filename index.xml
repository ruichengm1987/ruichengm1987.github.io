<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on 坚持的事:读书&amp;攒钱</title>
    <link>https://ruichengm1987.github.io/</link>
    <description>Recent content in Introduction on 坚持的事:读书&amp;攒钱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ruichengm1987.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.1.1.标识符与关键字</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.1.%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/2.1.1.%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.1.%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/2.1.1.%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>2.1.1.标识符与关键字 标识符 在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量名、常量名、函数名等等。 Go语言中标识符由字母数字和_(下划线）组成，并且只能以字母和_开头。 举几个例子：abc, _, _123, a123。
关键字 关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。
Go语言中有25个关键字：
break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 此外，Go语言中还有37个保留字。
Constants: true false iota nil Types: int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool byte rune string error Functions: make len cap new append copy close delete complex real imag panic recover </description>
    </item>
    
    <item>
      <title>2.11.1.包</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.11.%E5%8C%85/2.11.1.%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.11.%E5%8C%85/2.11.1.%E5%8C%85/</guid>
      <description>2.11.1.包 在工程化的Go语言开发项目中，Go语言的源码复用是建立在包（package）基础之上的。本文介绍了Go语言中如何定义包、如何导出包的内容及如何导入其他包。
包介绍 包（package）是多个Go源码的集合，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如fmt、os、io等。
定义包 我们还可以根据自己的需要创建自己的包。一个包可以简单理解为一个存放.go文件的文件夹。 该文件夹下面的所有go文件都要在代码的第一行添加如下代码，声明该文件归属的包。
package 包名 注意事项：
 一个文件夹下面直接包含的文件只能归属一个package，同样一个package的文件不能在多个文件夹下。 包名可以不和文件夹的名字一样，包名不能包含 - 符号。 包名为main的包为应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含main包的源代码则不会得到可执行文件。  可见性 如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public）。在Go语言中只需要将标识符的首字母大写就可以让标识符对外可见了。
举个例子， 我们定义一个包名为pkg2的包，代码如下：
package pkg2 import &amp;quot;fmt&amp;quot; // 包变量可见性 var a = 100 // 首字母小写，外部包不可见，只能在当前包内使用 // 首字母大写外部包可见，可在其他包中使用 const Mode = 1 type person struct { // 首字母小写，外部包不可见，只能在当前包内使用 name string } // 首字母大写，外部包可见，可在其他包中使用 func Add(x, y int) int { return x + y } func age() { // 首字母小写，外部包不可见，只能在当前包内使用 var Age = 18 // 函数局部变量，外部包不可见，只能在当前函数内使用 fmt.</description>
    </item>
    
    <item>
      <title>2.2.1.整型</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.1.%E6%95%B4%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.1.%E6%95%B4%E5%9E%8B/</guid>
      <description>2.2.1.整型 整型分为以下两个大类： 按长度分为：int8、int16、int32、int64 对应的无符号整型：uint8、uint16、uint32、uint64其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。
   类型 描述     uint8 无符号8位整型   uint16 无符号16位整型   uint32 无符号32位整型   uint64 无符号64位整型   int8 有符号8位整型   int16 有符号16位整型   int32 有符号32位整型   int64 有符号64位整型    特殊整型    类型 描述     uint 32位操作系统上就是uint32, 64位操作系统就是uint64   int 32位操作系统上就是int32， 64位操作系统就是int64   uintptr 无符号整型, 用于存放一个指针    注意: 在使用int和 uint类型时，不能假定它是32位或64位的整型，而是考虑int和uint可能在不同平台上的差异。</description>
    </item>
    
    <item>
      <title>2.3.1.算术运算符</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.1.%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.1.%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>2.3.1.算术运算符    运算符 描述     + 相加   - 相减   * 相乘   / 相除   % 求余    注意： ++（自增）和&amp;ndash;（自减）在Go语言中是单独的语句，并不是运算符。</description>
    </item>
    
    <item>
      <title>2.4.1.if</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.1.if/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.1.if/</guid>
      <description>2.4.1.if(分支结构).md if条件判断基本写法 Go语言中if条件判断的格式如下：
if 表达式1 { 分支1 } else if 表达式2 { 分支2 } else{ 分支3 } 当表达式1的结果为true时，执行分支1，否则判断表达式2，如果满足则执行分支2，都不满足时，则执行分支3。 if判断中的else if和else都是可选的，可以根据实际需要进行选择。
Go语言规定与if匹配的左括号{必须与if和表达式放在同一行，{放在其他位置会触发编译错误。 同理，与else匹配的{也必须与else写在同一行，else也必须与上一个if或else if右边的大括号在同一行。
举个例子：
func ifDemo1() { score := 65 if score &amp;gt;= 90 { fmt.Println(&amp;quot;A&amp;quot;) } else if score &amp;gt; 75 { fmt.Println(&amp;quot;B&amp;quot;) } else { fmt.Println(&amp;quot;C&amp;quot;) } } if条件判断特殊写法 if条件判断还有一种特殊的写法，可以在 if 表达式之前添加一个执行语句，再根据变量值进行判断，举个例子：
func ifDemo2() { if score := 65; score &amp;gt;= 90 { fmt.Println(&amp;quot;A&amp;quot;) } else if score &amp;gt; 75 { fmt.</description>
    </item>
    
    <item>
      <title>2.5.数组</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.5.%E6%95%B0%E7%BB%84/2.5.%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.5.%E6%95%B0%E7%BB%84/2.5.%E6%95%B0%E7%BB%84/</guid>
      <description>数组 数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是数组大小不可变化。 基本语法：
// 定义一个长度为3元素类型为int的数组a var a [3]int 数组定义 var 数组变量名 [元素数量]T 比如：var a [5]int， 数组的长度必须是常量，并且长度是数组类型的一部分。一旦定义，长度不能变。 [5]int和[10]int是不同的类型。
var a [3]int var b [4]int a = b //不可以这样做，因为此时a和b是不同的类型 数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1，访问越界（下标在合法范围之外），则触发访问越界，会panic。
数组的初始化 方法一 初始化数组时可以使用初始化列表来设置数组元素的值。
var testArray [3]int //数组会初始化为int类型的零值 var numArray = [3]int{1, 2} //使用指定的初始值完成初始化 方法二 按照上面的方法每次都要确保提供的初始值和数组长度一致，一般情况下我们可以让编译器根据初始值的个数自行推断数组的长度，例如：
var numArray = [...]int{1, 2} 方法三 我们还可以使用指定索引值的方式来初始化数组，例如:
a := [...]int{1: 1, 3: 5} 数组的遍历 遍历数组a有以下两种方法：
func main() { var a = [...]string{&amp;quot;北京&amp;quot;, &amp;quot;上海&amp;quot;, &amp;quot;深圳&amp;quot;} // 方法1：for循环遍历 for i := 0; i &amp;lt; len(a); i++ { fmt.</description>
    </item>
    
    <item>
      <title>2.6.切片</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.6.%E5%88%87%E7%89%87/2.6.%E5%88%87%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.6.%E5%88%87%E7%89%87/2.6.%E5%88%87%E7%89%87/</guid>
      <description>切片 引子 因为数组的长度是固定的并且数组长度属于类型的一部分，所以数组有很多的局限性。 例如：
func arraySum(x [3]int) int{ sum := 0 for _, v := range x{ sum = sum + v } return sum } 这个求和函数只能接受[3]int类型，其他的都不支持。 再比如，
a := [3]int{1, 2, 3} 数组a中已经有三个元素了，我们不能再继续往数组a中添加新元素了。
切片 切片（Slice）是一个拥有相同类型元素的可变长度的序列。它是基于数组类型做的一层封装。它非常灵活，支持自动扩容。
切片是一个引用类型，它的内部结构包含地址、长度和容量。切片一般用于快速地操作一块数据集合。
切片的定义 声明切片类型的基本语法如下：
var name []T 其中，
 name:表示变量名 T:表示切片中的元素类型 举个例子：  func main() { // 声明切片类型 var a []string //声明一个字符串切片 var b = []int{} //声明一个整型切片并初始化 var c = []bool{false, true} //声明一个布尔切片并初始化 var d = []bool{false, true} //声明一个布尔切片并初始化 fmt.</description>
    </item>
    
    <item>
      <title>2.7.map</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.7.map/2.7.map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.7.map/2.7.map/</guid>
      <description>2.7.map Go语言中提供的映射关系容器为map，其内部使用散列表（hash）实现。
map是一种无序的基于key-value的数据结构，Go语言中的map是引用类型，必须初始化才能使用。
map定义 Go语言中 map的定义语法如下：
map[KeyType]ValueType 其中
 KeyType:表示键的类型。 ValueType:表示键对应的值的类型。 map类型的变量默认初始值为nil，需要使用make()函数来分配内存。语法为：  make(map[KeyType]ValueType, [cap]) 其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。
map基本使用 map中的数据都是成对出现的，map的基本使用示例代码如下：
func main() { scoreMap := make(map[string]int, 8) scoreMap[&amp;quot;张三&amp;quot;] = 90 scoreMap[&amp;quot;小明&amp;quot;] = 100 fmt.Println(scoreMap) fmt.Println(scoreMap[&amp;quot;小明&amp;quot;]) fmt.Printf(&amp;quot;type of a:%T\n&amp;quot;, scoreMap) } 输出：
map[小明:100 张三:90] 100 type of a:map[string]int map也支持在声明的时候填充元素，例如：
func main() { userInfo := map[string]string{ &amp;quot;username&amp;quot;: &amp;quot;沙河小王子&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;123456&amp;quot;, } fmt.Println(userInfo) // } 判断某个键是否存在 Go语言中有个判断map中键是否存在的特殊写法，格式如下:
value, ok := map[key] 举个例子：
func main() { scoreMap := make(map[string]int) scoreMap[&amp;quot;张三&amp;quot;] = 90 scoreMap[&amp;quot;小明&amp;quot;] = 100 // 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值 v, ok := scoreMap[&amp;quot;张三&amp;quot;] if ok { fmt.</description>
    </item>
    
    <item>
      <title>2.8.函数</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.8.%E5%87%BD%E6%95%B0/2.8.%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.8.%E5%87%BD%E6%95%B0/2.8.%E5%87%BD%E6%95%B0/</guid>
      <description>2.8.函数 Go语言中支持函数、匿名函数和闭包，并且函数在Go语言中属于“一等公民”。
函数定义 Go语言中定义函数使用func关键字，具体格式如下：
func 函数名(参数)(返回值){ 函数体 } 其中:
 函数名：由字母、数字、下划线组成。但函数名的第一个字母不能是数字。在同一个包内，函数名也称不能重名 参数：参数由参数变量和参数变量的类型组成，多个参数之间使用,分隔。 返回值：返回值由返回值变量和其变量类型组成，也可以只写返回值的类型，多个返回值必须用()包裹，并用,分隔。 函数体：实现指定功能的代码块。  我们先来定义一个求两个数之和的函数：
func intSum(x int, y int) int { return x + y } 函数的参数和返回值都是可选的，例如我们可以实现一个既不需要参数也没有返回值的函数：
func sayHello() { fmt.Println(&amp;quot;Hello 沙河&amp;quot;) } 函数的调用 定义了函数之后，我们可以通过函数名()的方式调用函数。 例如我们调用上面定义的两个函数，代码如下：
func main() { sayHello() ret := intSum(10, 20) fmt.Println(ret) } 注意，调用有返回值的函数时，可以不接收其返回值。
参数 类型简写 函数的参数中如果相邻变量的类型相同，则可以省略类型，例如：
func intSum(x, y int) int { return x + y } 上面的代码中，intSum函数有两个参数，这两个参数的类型均为int，因此可以省略x的类型，因为y后面有类型说明，x参数也是该类型。
可变参数 可变参数是指函数的参数数量不固定。Go语言中的可变参数通过在参数名后加&amp;hellip;来标识。
注意：可变参数通常要作为函数的最后一个参数。
举个例子：
func intSum2(x .</description>
    </item>
    
    <item>
      <title>Go Test 单元测试简明教程</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/test/</guid>
      <description>Go Test 单元测试简明教程 1.如何写好单元测试 单元测试(Unit Tests, UT) 是一个优秀项目不可或缺的一部分，特别是在一些频繁变动和多人合作开发的项目中尤为重要。你或多或少都会有因为自己的提交，导致应用挂掉或服务宕机的经历。如果这个时候你的修改导致测试用例失败，你再重新审视自己的修改，发现之前的修改还有一些特殊场景没有包含，恭喜你减少了一次上库失误。也会有这样的情况，项目很大，启动环境很复杂，你优化了一个函数的性能，或是添加了某个新的特性，如果部署在正式环境上之后再进行测试，成本太高。对于这种场景，几个小小的测试用例或许就能够覆盖大部分的测试场景。而且在开发过程中，效率最高的莫过于所见即所得了，单元测试也能够帮助你做到这一点，试想一下，假如你一口气写完一千行代码，debug 的过程也不会轻松，如果在这个过程中，对于一些逻辑较为复杂的函数，同时添加一些测试用例，即时确保正确性，最后集成的时候，会是另外一番体验。
如何写好单元测试呢？
首先，学会写测试用例。比如如何测试单个函数/方法；比如如何做基准测试；比如如何写出简洁精炼的测试代码；再比如遇到数据库访问等的方法调用时，如何 mock。
然后，写可测试的代码。&amp;ldquo;高内聚,低耦合&amp;rdquo; 是软件工程的原则，同样，对测试而言，函数/方法写法不同，测试难度也是不一样的。职责单一，参数类型简单，与其他函数耦合度低的函数往往更容易测试。我们经常会说，“这种代码没法测试”，这种时候，就得思考函数的写法可不可以改得更好一些。为了代码可测试而重构是值得的。
接下来将介绍如何使用 Go 语言的标准库 testing 进行单元测试。
2.一个简单例子 Go 语言推荐测试文件和源代码文件放在一块，测试文件以 _test.go 结尾。比如，当前 package 有 calc.go 一个文件，我们想测试 calc.go 中的 Add 和 Mul 函数，那么应该新建 calc_test.go 作为测试文件。
example/ |--calc.go |--calc_test.go 假如 calc.go 的代码如下:
package main func Add(a int, b int) int { return a + b } func Mul(a int, b int) int { return a * b } 那么 calc_test.go 中的测试用例可以这么写：</description>
    </item>
    
    <item>
      <title>Linux命令行快捷键</title>
      <link>https://ruichengm1987.github.io/docs/linux/1.linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/1.linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>Linux命令行快捷键 涉及在linux命令行下进行快速移动光标、命令编辑、编辑后执行历史命令、Bang(!)命令、控制命令等。让basher更有效率。
常用 ctrl+左右键:在单词之间跳转 * ctrl+a:跳到本行的行首 * ctrl+e:跳到页尾 Ctrl+u：删除当前光标前面的文字 （还有剪切功能） ctrl+k：删除当前光标后面的文字(还有剪切功能) Ctrl+L：进行清屏操作 Ctrl+y:粘贴Ctrl+u或ctrl+k剪切的内容 Ctrl+w:删除光标前面的单词的字符 Alt – d ：由光标位置开始，往右删除单词。往行尾删 说明 Ctrl – k: 先按住 Ctrl 键，然后再按 k 键； Alt – k: 先按住 Alt 键，然后再按 k 键； M – k：先单击 Esc 键，然后再按 k 键。 移动光标 Ctrl – a ：移到行首 Ctrl – e ：移到行尾 Ctrl – b ：往回(左)移动一个字符 Ctrl – f ：往后(右)移动一个字符 Alt – b ：往回(左)移动一个单词 Alt – f ：往后(右)移动一个单词 Ctrl – xx ：在命令行尾和光标之间移动 M-b ：往回(左)移动一个单词 M-f ：往后(右)移动一个单词 编辑命令 Ctrl – h ：删除光标左方位置的字符 Ctrl – d ：删除光标右方位置的字符（注意：当前命令行没有任何字符时，会注销系统或结束终端） Ctrl – w ：由光标位置开始，往左删除单词。往行首删 Alt – d ：由光标位置开始，往右删除单词。往行尾删 M – d ：由光标位置开始，删除单词，直到该单词结束。 Ctrl – k ：由光标所在位置开始，删除右方所有的字符，直到该行结束。 Ctrl – u ：由光标所在位置开始，删除左方所有的字符，直到该行开始。 Ctrl – y ：粘贴之前删除的内容到光标后。 ctrl – t ：交换光标处和之前两个字符的位置。 Alt + .</description>
    </item>
    
    <item>
      <title>Linux如何关闭某个占用端口的进程</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B/linux%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E6%9F%90%E4%B8%AA%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B/linux%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E6%9F%90%E4%B8%AA%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/</guid>
      <description>Linux如何关闭某个占用端口的进程 1）查找被占用的端口: netstat -tln | grep 8000 tcp 0 0 192.168.2.106:8000 0.0.0.0:* LISTEN 2）查看被占用端口的PID： sudo lsof -i:8000 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME nginx 850 root 6u IPv4 15078 0t0 TCP 192.168.2.106:8000 (LISTEN) nginx 851 www-data 6u IPv4 15078 0t0 TCP 192.168.2.106:8000 (LISTEN) nginx 852 www-data 6u IPv4 15078 0t0 TCP 192.168.2.106:8000 (LISTEN) 3）kill掉该进程
sudo kill -9 850 </description>
    </item>
    
    <item>
      <title>reset命令:将仓库记录和恢复指定历史位置</title>
      <link>https://ruichengm1987.github.io/docs/git/1.%E8%BF%9B%E9%98%B6/0.reset%E5%91%BD%E4%BB%A4%E5%B0%86%E4%BB%93%E5%BA%93%E8%AE%B0%E5%BD%95%E5%92%8C%E6%81%A2%E5%A4%8D%E6%8C%87%E5%AE%9A%E5%8E%86%E5%8F%B2%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/1.%E8%BF%9B%E9%98%B6/0.reset%E5%91%BD%E4%BB%A4%E5%B0%86%E4%BB%93%E5%BA%93%E8%AE%B0%E5%BD%95%E5%92%8C%E6%81%A2%E5%A4%8D%E6%8C%87%E5%AE%9A%E5%8E%86%E5%8F%B2%E4%BD%8D%E7%BD%AE/</guid>
      <description>0.reset命令:将仓库记录和恢复指定历史位置 有时候我们用 git commit 提交代码后发现这一次提交的内容是错误的，需要将代码复原，这个时候常见有两种做法。
第一种是把代码错误内容修改正确，然后重新使用 commit 提交一次； 这种情况会多2条log记录
第二种方法是使用 git reset 命令撤销上一次错误的 commit 记录。 git reset HEAD^ # 撤销我们最近一次提交 git reset 815ac616803fa89c75467618b2be44f85696543d # 指定回滚位置, commitid git reset 815ac616803fa89c75467618b2be44f85696543d filename # 回滚某个文件到某次提交 </description>
    </item>
    
    <item>
      <title>shell基础</title>
      <link>https://ruichengm1987.github.io/docs/shell/shell%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/shell/shell%E5%9F%BA%E7%A1%80/</guid>
      <description>shell基础 shell是命令行解析器 关系: 内存-&amp;gt; shell -&amp;gt; 用户  shell概述 脚本执行方法 Bash的基本功能 </description>
    </item>
    
    <item>
      <title>UML</title>
      <link>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/uml%E5%9B%BE/%E7%B1%BB%E5%9B%BE%E5%9F%BA%E7%A1%80%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/uml%E5%9B%BE/%E7%B1%BB%E5%9B%BE%E5%9F%BA%E7%A1%80%E5%B1%9E%E6%80%A7/</guid>
      <description>UML类图 1.类图基础属性   +表示public -表示private #表示protected ~表示default,也就是包权限 _下划线表示static 斜体表示抽象  2.类与类之间关系 在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)
泛化 介绍： 泛化(Generalization)表示类与类之间的继承关系，接口与接口之间的继承关系，或类对接口的实现关系
(1) 继承
介绍：
继承表示是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。 表示方法：
继承使用空心三角形+实线表示。
示例：
鸟类继承抽象类动物
 （2）实现
介绍：
实现表示一个class类实现interface接口（可以是多个）的功能。
表示方法：
1）矩形表示法
使用空心三角形+虚线表示
比如：大雁需要飞行，就要实现飞()接口
 2）棒棒糖表示法
使用实线表示
 依赖 介绍：
对于两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，这两个对象之间主要体现为依赖关系。
表示方法：
依赖关系用虚线箭头表示。
示例：
动物依赖氧气和水。调用新陈代谢方法需要氧气类与水类的实例作为参数
 关联 介绍：
对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象之间为关联关系。
表示方法：
关联关系用实线箭头表示。
示例：
企鹅需要‘知道’气候的变化，需要‘了解’气候规律。当一个类‘知道’另一个类时，可以用关联。
 聚合 介绍：
表示一种弱的‘拥有’关系，即has-a的关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。 两个对象具有各自的生命周期。
表示方法：
聚合关系用空心的菱形+实线箭头表示。
示例：
每一只大雁都属于一个大雁群，一个大雁群可以有多只大雁。当大雁死去后大雁群并不会消失，两个对象生命周期不同。
 组合 介绍：
组合是一种强的‘拥有’关系，是一种contains-a的关系，体现了严格的部分和整体关系，部分和整体的生命周期一样。
表示方法：
组合关系用实心的菱形+实线箭头表示，还可以使用连线两端的数字表示某一端有几个实例。
示例：
鸟和翅膀就是组合关系，因为它们是部分和整体的关系，并且翅膀和鸟的生命周期是相同的。</description>
    </item>
    
    <item>
      <title>什么是数据结构</title>
      <link>https://ruichengm1987.github.io/docs/datas_tructure/%E5%85%A5%E9%97%A8/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/datas_tructure/%E5%85%A5%E9%97%A8/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>什么是数据结构 数据结构，直白地理解，就是研究数据的存储方式。</description>
    </item>
    
    <item>
      <title>关键字(25个)</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%85%B3%E9%94%AE%E5%AD%9725%E4%B8%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%85%B3%E9%94%AE%E5%AD%9725%E4%B8%AA/</guid>
      <description>关键字(25个) 引导程序整体结构的8个关键字  package // 定义包名的关键字 import //导入包名关键字 const //常量声明关键字 var //变量声明关键字 func //函数定义关键字 defer //延迟执行关键字 go //并发语法糖关键字 return //函数返回关键字  声明复合数据结构的4个关键字  struct //定义结构类型关键字 interface //定义接口类型关键字 map //声明或创建map类型关键字 chan //声明或创建通道类型关键字  控制程序结构的13个关键宇  if else //if else语句关键字 for range break continue //for循环使用的关键字 switch select type case default fallthrough //switch和select语句使用的关键字 goto //goto跳转语句关键字  </description>
    </item>
    
    <item>
      <title>初识Git:本地创建一个Git仓库</title>
      <link>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/0.%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgit%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/0.%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgit%E4%BB%93%E5%BA%93/</guid>
      <description>初识Git:本地创建一个Git仓库 ~ mkdir test ~ cd test ~/test git init 已初始化空的 Git 仓库于 /Users/ruichengm/test/.git/ ~/test(master) ls -al total 0 drwxr-xr-x 3 ruichengm staff 96 7 18 08:46 . drwxr-xr-x+ 107 ruichengm staff 3424 7 18 08:47 .. drwxr-xr-x 9 ruichengm staff 288 7 18 08:46 .git 认识.git ➜ .git git:(master) ls -al total 24 drwxr-xr-x 10 song staff 320 6 25 22:11 . drwxr-xr-x 3 song staff 96 6 25 22:11 .</description>
    </item>
    
    <item>
      <title>变量&amp;常量</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F/</guid>
      <description>变量&amp;amp;常量 变量 1、显式的完整声明 var varName dataType [ = value] 说明: 关键字var用于变量声明 varName 是变量名称标识符 dataType 数据类型 value 初始化值 例子: var a int = 1 2、短类型声明 varName := value := 声明只能出现在函数内（包括在方法内） 此时Go编译器自动进行数据类型推断 a, b := 1, &amp;quot;hello&amp;quot;  常量 const a = 1 const ( a = iota ) </description>
    </item>
    
    <item>
      <title>名词</title>
      <link>https://ruichengm1987.github.io/docs/english/%E8%AF%8D%E7%B1%BB/%E5%90%8D%E8%AF%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/english/%E8%AF%8D%E7%B1%BB/%E5%90%8D%E8%AF%8D/</guid>
      <description>名词 </description>
    </item>
    
    <item>
      <title>垃圾回收算法</title>
      <link>https://ruichengm1987.github.io/docs/datas_tructure/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/datas_tructure/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>常见垃圾回收算法   引用计数：对每个对象维护一个引用计数，当引用该对象的对象被销毁时，引用计数减1，当引用计数器为0是回收该对象。
 优点：对象可以很快的被回收，不会出现内存耗尽或达到某个阀值时才回收。 缺点：不能很好的处理循环引用，而且实时维护引用计数，有也一定的代价。 代表语言：Python、PHP、Swift    标记-清除：从根变量开始遍历所有引用的对象，引用的对象标记为&amp;quot;被引用&amp;rdquo;，没有被标记的进行回收。
 优点：解决了引用计数的缺点。 缺点：需要STW，即要暂时停掉程序运行。 代表语言：Golang(其采用三色标记法)    分代收集：按照对象生命周期长短划分不同的代空间，生命周期长的放入老年代，而短的放入新生代，不同代有不能的回收算法和回收频率。
 优点：回收性能好 缺点：算法复杂 代表语言： JAVA    </description>
    </item>
    
    <item>
      <title>复杂度</title>
      <link>https://ruichengm1987.github.io/docs/datas_tructure/%E5%85%A5%E9%97%A8/%E5%A6%82%E4%BD%95%E8%A1%A1%E9%87%8F%E4%B8%80%E4%B8%AA%E7%AE%97%E6%B3%95%E7%9A%84%E5%A5%BD%E5%9D%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/datas_tructure/%E5%85%A5%E9%97%A8/%E5%A6%82%E4%BD%95%E8%A1%A1%E9%87%8F%E4%B8%80%E4%B8%AA%E7%AE%97%E6%B3%95%E7%9A%84%E5%A5%BD%E5%9D%8F/</guid>
      <description>复杂度 复杂度是衡量代码运行效率的重要的度量因素，复杂度通常包括时间复杂度和空间复杂度
复杂度特性:  复杂度与具体的常系数无关 多项式级的复杂度相加的时候，选择高者作为结果 O(1) 也是表示一个特殊复杂度, 与输入数据量n无关  复杂度的经验结论  一个顺序结构的代码，时间复杂度是O(1) 二分查找，或者更通用地说是采用分而治之的二分策略，时间复杂度是O(logn). 一个简单的for循环，时间复杂度是O(n) 两个顺序执行的for循环,时间复杂度是O(n)+O(n)=O(2n),其实也是O(n) 两个嵌套的for循环, 时间复杂度是O(n2)  总结 时间复杂度与&amp;laquo;代码的结构设计&amp;raquo;高度相关
空间复杂度与&amp;laquo;数据结构的选择&amp;raquo;高度相关</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>字符串 </description>
    </item>
    
    <item>
      <title>字符串操作</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid>
      <description>字符串操作 </description>
    </item>
    
    <item>
      <title>安装</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%AE%89%E8%A3%85%E7%AF%87/%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%AE%89%E8%A3%85%E7%AF%87/%E5%AE%89%E8%A3%85/</guid>
      <description>安装 linux 下安装  wget https://dl.google.com/go/go1.x.x.linux-amd64.tar.gz 下载安装包 tar -C /usr/local -zxvf go1.x.x.linux-amd64.tar.gz 添加/usr/loacl/go/bin目录到PATH变量中。添加到/etc/profile 或$HOME/.profile都可以  vim /etc/profile export GOROOT=/usr/local/go #设置为go安装的路径,有些安装包会自动设置默认的goroot export GOPATH=/usr/local/goprojects/ #GO项目路径多个用&amp;rsquo;,&amp;lsquo;分开 export PATH=$PATH:$GOROOT/bin:$GOPATH/bin #加载 source /etc/profile   执行go version，如果现实版本号，则Go环境安装成功.  </description>
    </item>
    
    <item>
      <title>容错，高可用和灾备</title>
      <link>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/%E5%AE%B9%E9%94%99%E9%AB%98%E5%8F%AF%E7%94%A8%E5%92%8C%E7%81%BE%E5%A4%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/%E5%AE%B9%E9%94%99%E9%AB%98%E5%8F%AF%E7%94%A8%E5%92%8C%E7%81%BE%E5%A4%87/</guid>
      <description>容错，高可用和灾备 容错 容错（fault tolerance）指的是， 发生故障时，系统还能继续运行。
飞机有四个引擎，如果一个引擎坏了，剩下三个引擎，还能继续飞，这就是&amp;quot;容错&amp;rdquo;。同样的，汽车的一个轮子扎破了，剩下三个轮子，也还是勉强能行驶。
容错的目的是，发生故障时，系统的运行水平可能有所下降，但是依然可用，不会完全失败。
高可用 高可用（high availability）指的是， 系统能够比正常时间更久地保持一定的运行水平。
汽车的备胎就是一个高可用的例子。如果没有备胎，轮胎坏了，车就开不久了。备胎延长了汽车行驶的可用时间。
注意，高可用不是指系统不中断（那是容错能力），而是指一旦中断能够快速恢复，即中断必须是短暂的。如果需要很长时间才能恢复可用性，就不叫高可用了。上面例子中，更换备胎就必须停车，但只要装上去，就能回到行驶状态。
灾备 灾备（又称灾难恢复，disaster recovery）指的是， 发生灾难时恢复业务的能力。
上图中，飞机是你的 IT 基础设施，飞行员是你的业务，飞行员弹射装置就是灾备措施。一旦飞机即将坠毁，你的基础设施就要没了，灾备可以让你的业务幸存下来。
灾备的目的就是，保存系统的核心部分。一个好的灾备方案，就是从失败的基础设施中获取企业最宝贵的数据，然后在新的基础设施上恢复它们。注意，灾备不是为了挽救基础设置，而是为了挽救业务。
总结 上面三个方面可以结合起来，设计一个可靠的系统。
 容错：发生故障时，如何让系统继续运行。 高可用：系统中断时，如何尽快恢复。 灾备：系统毁灭时，如何抢救数据。  </description>
    </item>
    
    <item>
      <title>栈逃逸</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/%E6%A0%88%E9%80%83%E9%80%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/%E6%A0%88%E9%80%83%E9%80%B8/</guid>
      <description>栈逃逸 </description>
    </item>
    
    <item>
      <title>清理无意义的分支数据</title>
      <link>https://ruichengm1987.github.io/docs/git/1.%E8%BF%9B%E9%98%B6/1.%E6%B8%85%E7%90%86%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E5%88%86%E6%94%AF%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/1.%E8%BF%9B%E9%98%B6/1.%E6%B8%85%E7%90%86%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E5%88%86%E6%94%AF%E6%95%B0%E6%8D%AE/</guid>
      <description>清理无意义的分支数据  本地不存在，远程存在该分支，但不需要了 远程不存在，本地存在该分支，也不需要了  清理远程分支 1. 查看分支, 远程分支显示红色 git branch -a remotes/origin/dev 2. 执行命令 git push origin --delete dev 清理本地分支 1. 模拟场景 git checkout -b test6 2. 查看当前版本库的分支 git branch -a 3. 将分支推送到远程服务器中 git push --set-upstream origin test6 4. 查看远程分支的信息 git remote show origin 5. 删除远程分支 git push origin --delete test1 </description>
    </item>
    
    <item>
      <title>环境搭建</title>
      <link>https://ruichengm1987.github.io/docs/mysql/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/0.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/mysql/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/0.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>环境搭建 Mac版环境搭建 安装 brew install mysql 安装完后启动mysql mysql.server start 执行安全设置 mysql_secure_installation </description>
    </item>
    
    <item>
      <title>环境搭建</title>
      <link>https://ruichengm1987.github.io/docs/rust/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/0.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/rust/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/0.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>环境搭建 安装 1、 安装rustup $ curl https://sh.rustup.rs -sSf | sh 2、执行 $ source $HOME/.cargo/env 更新 $ rustup update 卸载Rust和rustup $ rustup self uninstall 故障排除 $ rustc --version # 看到rustc x.y.z (abcabcabc yyyy-mm-dd)表示安装成功 恭喜入坑！ </description>
    </item>
    
    <item>
      <title>简介</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/1.%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/1.%E7%AE%80%E4%BB%8B/</guid>
      <description>简介 软件包分类  源码包  脚本安装包   二进制包(RPM包、系统默认包)  </description>
    </item>
    
    <item>
      <title>网络基础</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
      <description>网络基础 1.iso/osi七层模型 7 应用层 &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-应用层协议&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 应用层 APDU(应用协议数据单元)
6 表示层 &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-表示层协议&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 表示层 PPDU(表示协议数据单元) 5 会话层 &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-会话层协议&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 会话层 SPDU(会话协议数据单元) 4 传输层 &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-传输层协议&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 传输层 TPDU(传输协议数据单元)
3 网络层 &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-网络层协议&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 网络层 报文 2 数据链路层 &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-数据链路层协议&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 数据链路层 帧 1 物理层 &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-物理层协议&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 物理层 比特
MAC地址负责局域网通信
IP地址负责外网通信
物理层: 设备之间的比特流的传输、物理接口、电气特征等
数据链路层: 成帧、用MAC地址访问媒介、错误检测与修正
网络层: 提供逻辑地址、选路
传输层: 可靠与不可靠的传输、传输前的错误检测、流控
会话层: 对应用会话的管理、同步
表示层: 数据的表示形式、特定功能的实现如-加密
应用层: 用户接口
2.Tcp/Ip四层模型  应用层 &amp;mdash;&amp;gt; (应用层, 表示层, 会话层) 传输层 &amp;mdash;&amp;gt; (传输层) 网际互联层 &amp;mdash;-&amp;gt; (网络层) 网络接口层 &amp;mdash;-&amp;gt; (物理层, 数据链路层)  网络接口层: 网络接入层是OSI参数模型中的物理层和数据链路层相对应.</description>
    </item>
    
    <item>
      <title>进程与线程的一个简单解释</title>
      <link>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/02%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/02%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</guid>
      <description>进程与线程的一个简单解释 进程（process）和线程（thread）是操作系统的基本概念，但是它们比较抽象，不容易掌握。
最近，我读到一篇材料，发现有一个很好的类比，可以把它们解释地清晰易懂。
 计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。
 假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。
 进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。
 一个车间里，可以有很多工人。他们协同完成一个任务。
 线程就好比车间里的工人。一个进程可以包括多个线程。
 车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。
 可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。
 一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫&amp;quot;互斥锁&amp;rdquo;（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。
 还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。
 这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做&amp;quot;信号量&amp;rdquo;（Semaphore），用来保证多个线程不会互相冲突。
不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。
 操作系统的设计，因此可以归结为三点：
（1）以多进程形式，允许多个任务同时运行；
（2）以多线程形式，允许单个任务分成不同的部分运行；
（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</description>
    </item>
    
    <item>
      <title>2.1.2.变量</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.1.%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/2.1.2.%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.1.%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/2.1.2.%E5%8F%98%E9%87%8F/</guid>
      <description>2.1.2.变量 变量的来历 程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。
变量类型 变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。
Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。
变量声明 Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且Go语言的变量声明后必须使用。
标准声明 Go语言的变量声明格式为：
var 变量名 变量类型 变量声明以关键字var开头，变量类型放在变量的后面，行尾无需分号。 举个例子：
var name string var age int var isOk bool 批量声明 每声明一个变量就需要写var关键字会比较繁琐，go语言中还支持批量变量声明：
var ( a string b int c bool d float32 ) 变量的初始化 Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil。
当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：
var 变量名 类型 = 表达式 举个例子：
var name string = &amp;quot;Q1mi&amp;quot; var age int = 18 或者一次初始化多个变量
var name, age = &amp;quot;Q1mi&amp;quot;, 20 类型推导 有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</description>
    </item>
    
    <item>
      <title>2.2.2.浮点型</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.2.%E6%B5%AE%E7%82%B9%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.2.%E6%B5%AE%E7%82%B9%E5%9E%8B/</guid>
      <description>2.2.2.浮点型 Go语言支持两种浮点型数：float32和float64。这两种浮点型数据格式遵循IEEE 754标准： float32 的浮点数的最大范围约为 3.4e38，可以使用常量定义：math.MaxFloat32。 float64 的浮点数的最大范围约为 1.8e308，可以使用一个常量定义：math.MaxFloat64。
打印浮点数时，可以使用fmt包配合动词%f，代码如下：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func main() { fmt.Printf(&amp;quot;%f\n&amp;quot;, math.Pi) fmt.Printf(&amp;quot;%.2f\n&amp;quot;, math.Pi) } </description>
    </item>
    
    <item>
      <title>2.3.2.关系运算符</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.2.%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.2.%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>2.3.2.关系运算符    运算符 描述     == 检查两个值是否相等，如果相等返回 True 否则返回 False。   != 检查两个值是否不相等，如果不相等返回 True 否则返回 False。   &amp;gt; 检查左边值是否大于右边值，如果是返回 True 否则返回 False。   &amp;gt;= 检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。   &amp;lt; 检查左边值是否小于右边值，如果是返回 True 否则返回 False。   &amp;lt;= 检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。    </description>
    </item>
    
    <item>
      <title>2.4.2.for</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.2.for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.2.for/</guid>
      <description>2.4.2.for(循环结构) Go 语言中的所有循环类型均可以使用for关键字来完成。
for循环的基本格式如下：
for 初始语句;条件表达式;结束语句{ 循环体语句 } 条件表达式返回true时循环体不停地进行循环，直到条件表达式返回false时自动退出循环。
func forDemo() { for i := 0; i &amp;lt; 10; i++ { fmt.Println(i) } } for循环的初始语句可以被忽略，但是初始语句后的分号必须要写，例如：
func forDemo2() { i := 0 for ; i &amp;lt; 10; i++ { fmt.Println(i) } } for循环的初始语句和结束语句都可以省略，例如：
func forDemo3() { i := 0 for i &amp;lt; 10 { fmt.Println(i) i++ } } 这种写法类似于其他编程语言中的while，在while后添加一个条件表达式，满足条件表达式时持续循环，否则结束循环。
无限循环 for { 循环体语句 } for循环可以通过break、goto、return、panic语句强制退出循环。
for range(键值循环) Go语言中可以使用for range遍历数组、切片、字符串、map 及通道（channel）。 通过for range遍历的返回值有以下规律：</description>
    </item>
    
    <item>
      <title>2.8.2.函数进阶</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.8.%E5%87%BD%E6%95%B0/2.8.2.%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.8.%E5%87%BD%E6%95%B0/2.8.2.%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</guid>
      <description>2.8.2.函数进阶 变量作用域 全局变量 全局变量是定义在函数外部的变量，它在程序整个运行周期内都有效。 在函数中可以访问到全局变量。
package main import &amp;quot;fmt&amp;quot; //定义全局变量num var num int64 = 10 func testGlobalVar() { fmt.Printf(&amp;quot;num=%d\n&amp;quot;, num) //函数中可以访问全局变量num } func main() { testGlobalVar() //num=10 } 局部变量 局部变量又分为两种： 函数内定义的变量无法在该函数外使用，例如下面的示例代码main函数中无法使用testLocalVar函数中定义的变量x：
func testLocalVar() { //定义一个函数局部变量x,仅在该函数内生效 var x int64 = 100 fmt.Printf(&amp;quot;x=%d\n&amp;quot;, x) } func main() { testLocalVar() fmt.Println(x) // 此时无法使用变量x } 如果局部变量和全局变量重名，优先访问局部变量。
package main import &amp;quot;fmt&amp;quot; //定义全局变量num var num int64 = 10 func testNum() { num := 100 fmt.Printf(&amp;quot;num=%d\n&amp;quot;, num) // 函数中优先使用局部变量 } func main() { testNum() // num=100 } 接下来我们来看一下语句块定义的变量，通常我们会在if条件判断、for循环、switch语句上使用这种定义变量的方式。</description>
    </item>
    
    <item>
      <title>Bash变量</title>
      <link>https://ruichengm1987.github.io/docs/shell/bash%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/shell/bash%E5%8F%98%E9%87%8F/</guid>
      <description>shell基础 Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title>defer</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/defer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/defer/</guid>
      <description>defer 什么是defer  defer是Go语言的一种用于注册延迟调用的机制,使得函数或语句可以在当前函数执行完毕后执行.  为什么需要defer  Go语言提供的语法糖,减少资源泄露的发生.  如何使用defer  在创建资源语句的附近,使得defer语句释放资源.  例子 func f1() (r int) { t := 5 // 1. 赋值指令 r = t // 2. defer被插入到赋值与返回质检， 这个例子中返回值r没被修改过 defer func() { t = t + 5 }() // 3. 空的return指令 return t } 返回值是5 func f2() (r int) { defer func(r int) { r = r + 5 }(r) // 此处r是copy了一份 return 1 } 返回值是1 func f3() (r int) { defer func(r *int) { *r = *r + 5 }(&amp;amp;r) // 此处r是传址 return 1 } 返回值是6 defer 是先入先出 func e1() { var err error defer fmt.</description>
    </item>
    
    <item>
      <title>GC垃圾回收</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>垃圾回收 </description>
    </item>
    
    <item>
      <title>Go Mock (gomock)简明教程</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/mock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/mock/</guid>
      <description>Go Mock (gomock)简明教程 1.gomock 简介 上一篇文章 Go Test 单元测试简明教程 介绍了 Go 语言中单元测试的常用方法，包括子测试(subtests)、表格驱动测试(table-driven tests)、帮助函数(helpers)、网络测试和基准测试(Benchmark)等。这篇文章介绍一种新的测试方法，mock/stub 测试，当待测试的函数/对象的依赖关系很复杂，并且有些依赖不能直接创建，例如数据库连接、文件I/O等。这种场景就非常适合使用 mock/stub 测试。简单来说，就是用 mock 对象模拟依赖项的行为。
GoMock is a mocking framework for the Go programming language. It integrates well with Go’s built-in testing package, but can be used in other contexts too. gomock 是官方提供的 mock 框架，同时还提供了 mockgen 工具用来辅助生成测试代码。
使用如下命令即可安装：
go get -u github.com/golang/mock/gomock go get -u github.com/golang/mock/mockgen 2.一个简单的 Demo // db.go type DB interface { Get(key string) (int, error) } func GetFromDB(db DB, key string) int { if value, err := db.</description>
    </item>
    
    <item>
      <title>iota</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/iota/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/iota/</guid>
      <description>iota   const (
a = 1 &amp;laquo; iota // a==1 (iota == 0)
b = 1 &amp;laquo; iota // b==2 （iota == 1）
c = 3 // c == 3 (iota==2, unused)
d = 1 &amp;laquo; iota // d==8 (iota == 3) )
  const x = iota // x==0
  const y = iota // y==0 分开的const语句,iota每次都从0开始
  </description>
    </item>
    
    <item>
      <title>RPM</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/rpm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/rpm/</guid>
      <description>RPM RPM包在系统光盘中 RPM包命名规则 httpd-2.2.15-15.el6.CENTOS.1.i686.rpm
-httpd 软件包名
-2.2.15 软件版本 -15 软件包发布的次数
-el6.centos 适合的Linux平台 -i686 适合的硬件平台 -rpm rpm包扩展名
RPM包依赖性  树形依赖: a -&amp;gt; b -&amp;gt; c 环形依赖: a -&amp;gt; b -&amp;gt; c -&amp;gt; a 模块依赖: 模块依赖, 查询网站: www.rpmfind.net  包全名与报名  包全名 操作的包是没有安装的软件包时,使用包全名,而且要注意路径 包名 操作已经安装的软件包时,使用包名,是搜索/var/lib/rpm中的数据库  RPM包安装  rpm -ivh 包全名 选项: -i (install) 安装 -v (verbose) 显示详细信息 -h (hash) 显示进度 &amp;ndash;nodeps 不检测依赖性  RPM包升级  rpm -Uvh 包全名 选项: -U (upgrade) 升级  RPM包卸载  rpm -e httpd 包名 选项: -e （erase）卸载 &amp;ndash;nodeps 不检查依赖性  RPM包查询 1.</description>
    </item>
    
    <item>
      <title>使用Git命令下载远程仓库到本地</title>
      <link>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1.%E4%BD%BF%E7%94%A8git%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BD%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/1.%E4%BD%BF%E7%94%A8git%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BD%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0/</guid>
      <description>使用Git命令下载远程仓库到本地 HTTP(S)获取远程仓库 首次拉取 git clone 版本库地址	[本地文件夹名称]
更新代码 git pull
临时记住密码  git config –-global credential.helper cache #默认缓存15分钟 git config credential.helper &amp;lsquo;cache –timeout=3600&amp;rsquo; #自定义配置记住 1 小时的命令  永久记住密码 git config &amp;ndash;global credential.helper store
修改配置文件.gitconfig
[credential] helper = store 在上面的命令中，如果没有&amp;ndash;global，则会在当前项目下的.git/config文件增加配置
SSH拉取 git clone git@gitee.com:xxx/xxxx.git xxxx
创建一个ssh key 执行命令: ssh-keygen 之后一直回车
查看公钥 cat ~/.ssh/id_rsa.pub
添加公钥到服务器 把公钥粘贴上去</description>
    </item>
    
    <item>
      <title>列表vs元组</title>
      <link>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%88%97%E8%A1%A8vs%E5%85%83%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%88%97%E8%A1%A8vs%E5%85%83%E7%BB%84/</guid>
      <description>列表vs元组 列表 一、创建列表 1.创建空的列表 列表 = [] 2.创建包含元素的列表 列表 = [元素1, 元素2, ..., 元素N] 二、列表元素的获取 1.通过索引获取元素 元素 = 列表[索引] 2.通过元素获取索引 索引 = 列表.index(元素) 3.查看元素是否存在于列表中 布尔值 = 元素 in 列表 4.统计元素在列表中的个数 个数 = 列表.count(元素) 三、列表元素的添加 1.向列表末尾追加元素 列表.append(元素) 2.向列表的任意位置插入元素 列表.insert(索引, 元素) 3.列表末尾追加另一个列表的所有元素 列表.extend(另一列表) 四、列表元素的删除 1.按索引删除元素 元素 = 列表.pop(索引) 2.按索引删除元素（del方法) del 列表[索引] 3.直接删除元素 列表.remove(元素) 4.清空所有元素 列表.clear() 五、列表元素的修改 1.通过赋值修改列表元素 列表[索引] = 新元素 2.反转整个列表 列表.reverse() 3.列表元素排序 列表.sort() 元组 元组和列表非常相似，也是用于存放元素的有序序列。它用的圆括号（()）表示，元素写入圆括号中，多个元素时用逗号分隔，如 (1, 2, 3)。
元组创建完成后，便不能向其中添加元素，也不能修改和删除其中的任何一个元素。所以它与列表相比，只能查找元素，也就是说只具备读的功能，不具备写的功能。元组的这一特性叫作不可变（性）（Immutable），而列表是可变的（Mutable）。
一、创建元组 1.创建空的元组 元组 = () 2.</description>
    </item>
    
    <item>
      <title>国内镜像配置</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%AE%89%E8%A3%85%E7%AF%87/%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%AE%89%E8%A3%85%E7%AF%87/%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</guid>
      <description>国内镜像配置 Go 1.13及以上(推荐) 打开你的终端并执行: go env -w GOPROXY=https://goproxy.cn,direct  Go module 打开你的终端并执行: go env -w GO111MODULE=on  go imports go imports包的引入可以让代码书写变得更加快捷 $ go get -v golang.org/x/tools/cmd/goimports  </description>
    </item>
    
    <item>
      <title>并行、并发与分布式计算</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B9%B6%E8%A1%8C%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B9%B6%E8%A1%8C%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/</guid>
      <description>ddd</description>
    </item>
    
    <item>
      <title>数组操作</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</guid>
      <description>数组操作 </description>
    </item>
    
    <item>
      <title>类型标识符(20个)</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E7%B1%BB%E5%9E%8B%E6%A0%87%E8%AF%86%E7%AC%A620%E4%B8%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E7%B1%BB%E5%9E%8B%E6%A0%87%E8%AF%86%E7%AC%A620%E4%B8%AA/</guid>
      <description>类型标识符(20个) 数值（16个） 整型（12个） byte
int
int8 int16 int32 int64
uint unint8 uint16 uint32 uint64
uintprt
浮点型（2个） float32
float64
复数型（2个） complex64
complex128
字符和字符串型（ 2 个） string rune
接口型（1个） error
布尔型（1个） bool</description>
    </item>
    
    <item>
      <title>网络配置</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid>
      <description>网络配置 配置IP地址 1. ifconfig命令临时配置ip地址 ifconfig命令: 查看与配置网络状态命令
#临时设置eth0网卡的IP地址与子网掩码 ifconfig eth0 192.168.0.200 netmask 255.255.255.0
2. setup工具永久配置IP地址(rethat专有) 3. 修改网络配置文件  网卡信息文件  vi /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 //网卡设备名 BOOTPROTO=none //是否自动获取IP(none、static、dhcp) HWADDR=00:0c:29:17:c4:09 //MAC地址 NM_CONTROLLED=yes //是否可以由network manager图形管理工具托管 ONBOOT=yes //是否随网络服务启动, eth0生效 TYPE=Ethernet //类型为以太网 UUID=&amp;quot;xxsfwafewfw&amp;quot; //唯一识别码 IPADDR=192.168.0.252 //IP地址 NETMASK=255.255.255.0 //子网掩码 GATEWAY=192.168.0.1 //网关 DNS1=202.106.0.20 //DNS IPV6INIT=no //IPv6没有启用 USERCTL=no //不允许非root用户控制此网卡  主机名文件  vi /etc/sysconfig/network NETWORKING=yes HOSTNAME=localhost.localdomain # 查看与临时设置主机名命令 [root@localhost ~]# hostname imooc  DNS配置文件  vi /etc/resolv.conf nameserver 202.106.0.20 search localhost 4.</description>
    </item>
    
    <item>
      <title>2.1.3.常量</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.1.%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/2.1.3.%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.1.%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/2.1.3.%E5%B8%B8%E9%87%8F/</guid>
      <description>2.1.3.常量 相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把var换成了const，常量在定义的时候必须赋值。
const pi = 3.1415 const e = 2.7182 声明了pi和e这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。
多个常量也可以一起声明：
const ( pi = 3.1415 e = 2.7182 ) const同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：
const ( n1 = 100 n2 n3 ) 上面示例中，常量n1、n2、n3的值都是100。
iota iota是go语言的常量计数器，只能在常量的表达式中使用。
iota在const关键字出现时将被重置为0。const中每新增一行常量声明将使iota计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。
举个例子：
const ( n1 = iota //0 n2 //1 n3 //2 n4 //3 ) 使用_跳过某些值 const ( n1 = iota //0 n2 //1 _ n4 //3 ) iota声明中间插队 const ( n1 = iota //0 n2 = 100 //100 n3 = iota //2 n4 //3 ) const n5 = iota //0 定义数量级 （这里的&amp;laquo;表示左移操作，1&amp;laquo;10表示将1的二进制表示向左移10位，也就是由1变成了10000000000，也就是十进制的1024。同理2&amp;laquo;2表示将2的二进制表示向左移2位，也就是由10变成了1000，也就是十进制的8。）</description>
    </item>
    
    <item>
      <title>2.2.3.复数</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.3.%E5%A4%8D%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.3.%E5%A4%8D%E6%95%B0/</guid>
      <description>2.2.3.复数 complex64和complex128
package main import &amp;quot;fmt&amp;quot; func main() { var c1 complex64 c1 = 1 + 2i var c2 complex128 c2 = 2 + 3i fmt.Println(c1) fmt.Println(c2) } 复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</description>
    </item>
    
    <item>
      <title>2.3.3.逻辑运算符</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.3.%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.3.%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>2.3.3.逻辑运算符    运算符 描述     &amp;amp;&amp;amp; 逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。   || 逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。   ! 逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。    </description>
    </item>
    
    <item>
      <title>2.4.2.switch</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.3.switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.3.switch/</guid>
      <description>2.4.3.switch 使用switch语句可方便地对大量的值进行条件判断。
func switchDemo1() { finger := 3 switch finger { case 1: fmt.Println(&amp;quot;大拇指&amp;quot;) case 2: fmt.Println(&amp;quot;食指&amp;quot;) case 3: fmt.Println(&amp;quot;中指&amp;quot;) case 4: fmt.Println(&amp;quot;无名指&amp;quot;) case 5: fmt.Println(&amp;quot;小拇指&amp;quot;) default: fmt.Println(&amp;quot;无效的输入！&amp;quot;) } } Go语言规定每个switch只能有一个default分支。
一个分支可以有多个值，多个case值中间使用英文逗号分隔。
func testSwitch3() { switch n := 7; n { case 1, 3, 5, 7, 9: fmt.Println(&amp;quot;奇数&amp;quot;) case 2, 4, 6, 8: fmt.Println(&amp;quot;偶数&amp;quot;) default: fmt.Println(n) } } 分支还可以使用表达式，这时候switch语句后面不需要再跟判断变量。例如：
func switchDemo4() { age := 30 switch { case age &amp;lt; 25: fmt.</description>
    </item>
    
    <item>
      <title>shell运算符</title>
      <link>https://ruichengm1987.github.io/docs/shell/shell%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/shell/shell%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>shell基础 Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title>依赖管理</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%AE%89%E8%A3%85%E7%AF%87/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%AE%89%E8%A3%85%E7%AF%87/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</guid>
      <description>依赖管理 依赖管理的三个阶段: GOPATH, GOVENDOR, go mod
GOPATH 默认在~/go
go mod的使用 使用intelij Idea创建项目  打开Intelij Idea, File-&amp;gt;new-&amp;gt;project 选择Go MOdules(vgo), 将Proxy: 改为https://goproxy.cn,direct 打开ide的terminal输入go env查看GO111MODULE是否为on，和查看GOPROXY是否为: https://goproxy.cn,direct 继续在terminal输入: go get -u go.uber.org/zap  获取某个固定版本: go get -u go.uber.org/zap@1.11
获取最新的版本: go get -u go.uber.org/zap
清洁: go mod tidy
增加依赖：
1. go get
2. 代码直接写, 点run的时候自动下载
go build ./...  迁移到go mod go mod init modtest2 go build ./... 增加依赖 go get  总结  由go命令统一的管理, 用户不必关心目录结构 初始化: go mode init [名称] 增加依赖: go get 或者 直接写代码,在build的时候把依赖加进去 更新依赖: go get [@v&amp;hellip;], go mod tidy # 不加@v表示拿最新版本 将旧项目迁移到go mod: go mod init, go build .</description>
    </item>
    
    <item>
      <title>切片操作</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C/</guid>
      <description>切片操作 </description>
    </item>
    
    <item>
      <title>可靠的性能测试</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid>
      <description>可靠的性能测试 主要内容  可靠的测试环境 benchstat 例子与实践  对代码进行性能调优 Benchmark的正确性分析 其他的影响因素   假设检验的原理 局限与应对措施 总结  性能测试方法论 1、搜索需求
2、编写测试用例
3、自动化性能测试用例
4、执行性能测试用例
5、分析性能测试结果
6、性能调优
7、性能基准测试(Performance Benchmarking)
8、向客户推荐合适的配合
影响测试环境的软硬件因素  硬件: CPU型号、温度、IO等 软件: 操作系统版本、当前系统调度的负载等  性能基准测试的两个基本目标 可重复性: 在其他外在的条件不变的情况下, 性能度量结果是稳定、可重复的(能复现的才叫bug)
可比较性: 总是存在一个可以比较的基本线(有比较才有伤害)
benchstat go get golang.org/x/perf/cmd/benchstat benchstat --help usage: benchstat [options] old.txt [new.txt] [more.txt ...] options: -alpha α consider change significant if p &amp;lt; α (default 0.05) -csv print results in CSV form -delta-test test significance test to apply to delta: utest, ttest, or none (default &amp;quot;utest&amp;quot;) -geomean print the geometric mean of each file -html print results as an HTML table -norange suppress range columns (CSV only) -sort order sort by order: [-]delta, [-]name, none (default &amp;quot;none&amp;quot;) -split labels split benchmarks by labels (default &amp;quot;pkg,goos,goarch&amp;quot;) </description>
    </item>
    
    <item>
      <title>如何把修改后的代码提交到远程仓库</title>
      <link>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/2.%E5%A6%82%E4%BD%95%E6%8A%8A%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/2.%E5%A6%82%E4%BD%95%E6%8A%8A%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>如何把修改后的代码提交到远程仓库 同步远程代码 git pull
检查改动文件 git status
 Untracked: 未跟踪,一般为新增文件，此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged. Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. deleted: 文件已删除，本地删除，服务器上还没有删除. renamed: 文件名称被改变  如果发现无意中编辑了某一个文件，但实际上并不想改变它，这里可以使用git checkout 文件名来撤销更改
git checkout README.md 添加文件到缓存 git add index.php #添加所有使用 git add .
提交代码 git commit . -m “这是备注信息”
推送代码 git push
开发中的提交 git add test1.php test2.log
git commit #此刻会打开一个文件, 删除非提交的之后保存 git push origin branch/feature/1 #推送到指定分支
notice  git add -A更好。因为git add .不会提交删除操作 git add abc.</description>
    </item>
    
    <item>
      <title>字典vs集合</title>
      <link>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%AD%97%E5%85%B8vs%E9%9B%86%E5%90%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%AD%97%E5%85%B8vs%E9%9B%86%E5%90%88/</guid>
      <description>字典vs集合 字典 字典是一种用来存放若干键值对的数据类型。
一、创建字典 1.创建空的字典 字典 = {} 2.创建包含键值对的字典 字典 = {键1:值1, 键2:值2, ..., 键N:值N} 二、字典键值对的添加 1.向字典中增加键值对 字典[键] = 值 三、键值对的获取 1.通过键获取值 值 = 字典[键] 2.通过键获取值(get方法) 值 = 字典.get(键) 3.判断字典中是否包含某个键 布尔值 = 键 in 字典 4.获取所有键 键的列表 = 字典.keys() 5.获取所有值 值的列表 = 字典.values() 6.获取所有键值对的列表 值的列表 = 字典.items() 四、字典键值对的删除 1.通过键删除键值对 值 = 字典.pop(键) 2.通过键删除键值对（del 方法） del 字典[键] 3.随机删除一个键值对 键值二元组 = 字典.popitem() 4.清空所有键值对 键值二元组 = 字典.clear() 五、字典中键值对修改 1.修改键对应的值 字典[键] = 值 2.用字典批量更新键值对 字典.</description>
    </item>
    
    <item>
      <title>常量值标识符(4个)</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%B8%B8%E9%87%8F%E5%80%BC%E6%A0%87%E8%AF%86%E7%AC%A64%E4%B8%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%B8%B8%E9%87%8F%E5%80%BC%E6%A0%87%E8%AF%86%E7%AC%A64%E4%B8%AA/</guid>
      <description>常量值标识符(4个) true false //true 和 false 表示 bool 类型的两常量值 iota //用在连续的枚举类型的声明中 nil //指针／引用型的变量的默认值就是 nil</description>
    </item>
    
    <item>
      <title>数据类型</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>#数据类型
一、基本数据类型 Go 语言内置七类基本数据类型
1.布尔类型  True False //不初始化默认为false  2.整型 byte int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr  3.浮点型 float32 float64  4.复数 complex64 complex128 // real返回复数的实部, image返回复数的虚部  5.字符 rune //rune是uint类型的别名  6.字符串: string 赋值: a := &amp;quot;hello&amp;quot; a := &amp;quot;hello world&amp;quot; b := []byte(a) c := []rune(a) b和c的结果都是:[104 101 108 108 111 44 32 119 111 114 108 100]  7.错误类型: error 8.</description>
    </item>
    
    <item>
      <title>网络命令</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</guid>
      <description>网络命令 网络环境查看命令 1. ifconfig 查看与配置网络状态命令
2. 关闭与启动网卡 ifdown 网卡设备名 # 禁用该网卡设备
ifup 网卡设备名 # 启用该网卡设备
3. 查询网络状态 netstat 选项:
-t 列出TCP协议端口
-u 列出UDP协议端口
-n 不适用域名与服务名, 而使用IP地址和端口号
-l 仅列出在监听状态网络服务
-a 列出所有的网络连接
4. route命令 route -n # 查看路由列表(可以看到网关)
route add default gw 192.168.1.1 # 临时设定网关
在一台服务器里, 连内网的网卡是不能设置网关的
5. 域名解析命令 nslookup [主机名或IP] # 进行域名或IP地址解析
nslookup # 查看本机DNS服务器
网络测试命令 1. ping 命令 ping -c 10 192.168.1.1 # ping 10次
2. telnet 命令 telnet [域名或IP] 【端口】# 远程管理与端口探测命令(明文传输)</description>
    </item>
    
    <item>
      <title>逃逸分析</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>逃逸分析 例子 /* * 闭包引用了x变量, a,b可以看做2个不同的实例,实例之间互不影响,实例内部,x变量是同一个地址,因此具有&amp;quot;累加效应&amp;quot; */ package main import &amp;quot;fmt&amp;quot; func main() { var a = acc() fmt.Printf(&amp;quot;%d\n&amp;quot;, a(1)) fmt.Printf(&amp;quot;%d\n&amp;quot;, a(10)) fmt.Printf(&amp;quot;%d\n&amp;quot;, a(100)) fmt.Println(&amp;quot;-------------------&amp;quot;) var b = acc() fmt.Printf(&amp;quot;%d\n&amp;quot;, b(1)) fmt.Printf(&amp;quot;%d\n&amp;quot;, b(10)) fmt.Printf(&amp;quot;%d\n&amp;quot;, b(100)) } func acc() func(int) int { var x int return func(delta int) int { fmt.Printf(&amp;quot;%+v, %+v&amp;quot;, &amp;amp;x, x) x += delta return x } } 结果: 0xc000016070, 01 0xc000016070, 111 0xc000016070, 11111 ------------------- 0xc0000160b0, 01 0xc0000160b0, 111 0xc0000160b0, 11111 </description>
    </item>
    
    <item>
      <title>2.2.4.布尔值</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.4.%E5%B8%83%E5%B0%94%E5%80%BC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.4.%E5%B8%83%E5%B0%94%E5%80%BC/</guid>
      <description>2.2.4.布尔值 Go语言中以bool类型进行声明布尔型数据，布尔型数据只有true（真）和false（假）两个值。
注意:
 布尔类型变量的默认值为false。 Go 语言中不允许将整型强制转换为布尔型. 布尔型无法参与数值运算，也无法与其他类型进行转换。  </description>
    </item>
    
    <item>
      <title>2.3.4.位运算符</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.4.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.4.%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>2.3.4.位运算符 位运算符对整数在内存中的二进制位进行操作。
   运算符 描述     &amp;amp; 参与运算的两数各对应的二进位相与。（两位均为1才为1）   | 参与运算的两数各对应的二进位相或。（两位有一个为1就为1）   ^ 参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。（两位不一样则为1）   &amp;laquo; 左移n位就是乘以2的n次方。“a&amp;laquo;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。   &amp;gt;&amp;gt; 右移n位就是除以2的n次方。“a&amp;raquo;b”是把a的各二进位全部右移b位。    </description>
    </item>
    
    <item>
      <title>2.4.4.goto</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.4.goto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.4.goto/</guid>
      <description>2.4.4.goto(跳转到指定标签) goto语句通过标签进行代码间的无条件跳转。goto语句可以在快速跳出循环、避免重复退出上有一定的帮助。Go语言中使用goto语句能简化一些代码的实现过程。 例如双层嵌套的for循环要退出时：
func gotoDemo1() { var breakFlag bool for i := 0; i &amp;lt; 10; i++ { for j := 0; j &amp;lt; 10; j++ { if j == 2 { // 设置退出标签 breakFlag = true break } fmt.Printf(&amp;quot;%v-%v\n&amp;quot;, i, j) } // 外层for循环判断 if breakFlag { break } } } 使用goto语句能简化代码：
func gotoDemo2() { for i := 0; i &amp;lt; 10; i++ { for j := 0; j &amp;lt; 10; j++ { if j == 2 { // 设置退出标签 goto breakTag } fmt.</description>
    </item>
    
    <item>
      <title>MAP操作</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/map%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/map%E6%93%8D%E4%BD%9C/</guid>
      <description>MAP操作 </description>
    </item>
    
    <item>
      <title>使用diff查看修改了哪些代码</title>
      <link>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/3.%E4%BD%BF%E7%94%A8diff%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/3.%E4%BD%BF%E7%94%A8diff%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BB%A3%E7%A0%81/</guid>
      <description>使用diff查看修改了哪些代码 名词定义 工作区 工作区，指的是当前正在编辑的文件，将还没有修改的内容通过git add命令暂存起来
暂存区 暂存区，指的是文件修改之后并且通过git add命令临时存储到版本记录里了，但还没有正式通过git commit提交的阶段
比较改动 git diff [文件]
与指定记录比较 你可以先通过git log命令，找到历史提交记录的一个 hash 值。 将要比较的 hash 值复制下来，然后执行如下所示命令：git diff hash值
与最新版本比较 git diff HEAD
比较两个历史记录 git diff hash值1 hash值2
查看暂存区的额外参数 &amp;ndash;cached </description>
    </item>
    
    <item>
      <title>控制结构</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</guid>
      <description>控制结构 1.if语句 if err, file := os.Open(&amp;quot;xxx&amp;quot;); err == nil { //do smoething } else { return nil, err } if score &amp;gt;= 90 { } else if score &amp;gt;= 80 { } else { }  2.switch语句 switch 语句会根据传入的参数检测并执行符合条件的分支. switch 的语法特点如下: switch 和 if 语句一样, switch后面可以带一个可选的简单的初始化语句 switch 后面的表达式也是可选的, 如果没有表达式, 则case子句是一个布尔表达式. 而不是一个值, 此时就相当于多重if else语句 switch 条件表达式的值不像c语言那样必须限制为整数, 可以是任意支持相等比较运算的类型变量 通过fallthough语句来强制执行下一个case子句(不再判断下一个case子句的条件是否满足) switch支持default语句, 当所有的case分支都不符合时,执行default语句,并且default语句可以放到任意位置,并不影响switch的逻辑判断 swith和.(type)结合可以进行类型的查询， （//todo::） switch i := &amp;quot;y&amp;quot;; i { //switch后面可以带上一个初始化语句 case &amp;quot;y&amp;quot;, &amp;quot;Y&amp;quot;: //多个case值使用逗号分隔 fmt.</description>
    </item>
    
    <item>
      <title>环境变量配置文件</title>
      <link>https://ruichengm1987.github.io/docs/shell/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/shell/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>shell基础 Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title>空白标识符(1个)</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E7%A9%BA%E7%99%BD%E6%A0%87%E8%AF%86%E7%AC%A61%E4%B8%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E7%A9%BA%E7%99%BD%E6%A0%87%E8%AF%86%E7%AC%A61%E4%B8%AA/</guid>
      <description>空白标识符(1个) _ // 空白标识符有特殊的含义, 用来声明一个匿名的变量,该变量在赋值表达式的左端,空白标识符引用通常被用作占位</description>
    </item>
    
    <item>
      <title>远程登录工具</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%B7%A5%E5%85%B7/</guid>
      <description>远程登录工具 SSH协议原理 对称加密算法: 采用单秘钥密码系统的加密方法
 ssh 用户名@ip scp [-r]  </description>
    </item>
    
    <item>
      <title>迭代器和生成器</title>
      <link>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>迭代器和生成器 迭代器 什么是迭代呢？在编程中，迭代指的是通过重复执行某个操作，不断获取被迭代对象中的数据。这样的每一次操作就是就是一次迭代。
迭代器是具有迭代功能的对象。我们使用迭代器来进行迭代操作。
迭代器 = iter(容器)
&amp;gt;&amp;gt;&amp;gt; numbers=[1,2,3,4,5] &amp;gt;&amp;gt;&amp;gt; it = iter(numbers) &amp;gt;&amp;gt;&amp;gt; it &amp;lt;listiterator object at 0x1007e6950&amp;gt; &amp;gt;&amp;gt;&amp;gt; for 循环的迭代过程 for 循环的迭代就是通过使用迭代器来完成的。它在背后所做的事情是：
 对一个容器调用 iter() 函数，获取到该容器的迭代器 每次循环时对迭代器调用 next() 函数，以获取一个值 若捕获到 StopIteration 异常则结束循环  可迭代（Iterable）对象 并不是所有的对象都可以被 iter() 函数使用。
什么是可迭代(的)？
1、从表面来看，所有可用于 for 循环的对象是可迭代的，如列表、元组、字符串、集合、字典等容器
2、从深层来看，定义了 iter() 方法的类对象就是可迭代的。当这个类对象被 iter() 函数使用时，将返回一个迭代器对象。如果对象具有__iter__() 方法，则可以说它支持迭代协议。
判断一个已有的对象是否是可迭代的 1、 &amp;lsquo;iter&amp;rsquo; in dir(list)
2、 isinstance(对象, Iterable)
自定义迭代器 class MyIterator: def __next__(self): 代码块 def __iter__(self): return self 生成器 刚才我们自定义了迭代器，其实创建迭代器还有另一种方式，就是使用生成器。
生成器是一个函数，这个函数的特殊之处在于它的 return 语句被 yield 语句替代。</description>
    </item>
    
    <item>
      <title>2.2.5.字符串</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.5.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.5.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>2.2.5.字符串 Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。 Go 语言里的字符串的内部实现使用UTF-8编码。 字符串的值为双引号(&amp;quot;)中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：
s1 := &amp;quot;hello&amp;quot; s2 := &amp;quot;你好&amp;quot; 字符串转义符 Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。
   转义符 含义     \r 回车符(返回行首)   \n hua换行符(直接跳到下一行的同列位置)   \t 制表符   \&amp;rsquo; 单引号   \&amp;rdquo; 双引号   \\ 反斜杠    举个例子，我们要打印一个Windows平台下的一个文件路径：
package main import ( &amp;quot;fmt&amp;quot; ) func main() { fmt.Println(&amp;quot;str := \&amp;quot;c:\\Code\\lesson1\\go.exe\&amp;quot;&amp;quot;) } 多行字符串 Go语言中要定义一个多行字符串时，就必须使用反引号字符：
s1 := `第一行 第二行 第三行 ` fmt.</description>
    </item>
    
    <item>
      <title>2.3.5.赋值运算符</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.5.%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.3.%E8%BF%90%E7%AE%97%E7%AC%A6/2.3.5.%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>2.3.5.赋值运算符    运算符 描述     = 简单的赋值运算符，将一个表达式的值赋给一个左值   += 相加后再赋值   -= 相减后再赋值   *= 相乘后再赋值   /= 相除后再赋值   %= 求余后再赋值   &amp;laquo;= 左移后赋值   &amp;raquo;= 右移后赋值   &amp;amp;= 按位与后赋值   |= 按位或后赋值   ^= 按位异或后赋值    </description>
    </item>
    
    <item>
      <title>2.4.5.break</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.5.break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.5.break/</guid>
      <description>2.4.5.break(跳出循环) break语句可以结束for、switch和select的代码块。
break语句还可以在语句后面添加标签，表示退出某个标签对应的代码块，标签要求必须定义在对应的for、switch和 select的代码块上。 举个例子：
func breakDemo1() { BREAKDEMO1: for i := 0; i &amp;lt; 10; i++ { for j := 0; j &amp;lt; 10; j++ { if j == 2 { break BREAKDEMO1 } fmt.Printf(&amp;quot;%v-%v\n&amp;quot;, i, j) } } fmt.Println(&amp;quot;...&amp;quot;) } </description>
    </item>
    
    <item>
      <title>内置函数(15个)</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B015%E4%B8%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B015%E4%B8%AA/</guid>
      <description>内置函数(15个) make new len cap append copy delete panic recover close complex real image Print Printin</description>
    </item>
    
    <item>
      <title>帮助命令</title>
      <link>https://ruichengm1987.github.io/docs/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/</guid>
      <description>帮助命令 帮助命令man man 命令 man的级别 1: 查看命令帮助 2: 查看可被内核调用的函数的帮助 3: 查看函数和函数库的帮助 4: 查看特殊文件的帮助(主要是/dev目录下的文件) 5: 查看配置文件的帮助 6: 查看游戏的帮助 7: 查看其他杂项的帮助 8: 查看系统管理员可用命令的帮助 9: 查看和内核相关文件的帮助 查看命令拥有哪个级别的帮助 man -f 命令 或者 whatis 命令 举例: man -5 passwd man -4 null man -8 ifconfig 查看和命令相关的所有帮助 man -k 命令 或者 apropos 命令 举例: man -k passwd  其他帮助命令 * 选项帮助: 命令 --help #获取命令选项的帮助 例如: ls --help * shell内部命令帮助 help shell内部命令 #获取shell内部命令的帮助 例如: whereis cd #确定是否是shell内部命令 只要找不到执行文件都是内部命令 help cd #获取内部命令帮助 * 详细命令帮助info - 回车: 进入子帮助页面(带有*号标记) - u: 进入上层页面 - n: 进入下一个帮助小节 - p: 进入上一个帮助小节 - q: 退出  </description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://ruichengm1987.github.io/docs/shell/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/shell/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>shell基础 Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title>生成器表达式和列表生成式</title>
      <link>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</guid>
      <description>生成器表达式和列表生成式 列表生成式 nums = [2 ** i for i in range(1, 11)] 这行代码就是我们这个章节要所讲的列表生成式。顾名思义，列表生成式最终生成的是一个列表，它是用已有的可迭代对象来构造新列表的便捷方法。
列表生成式的写法 列表生成式的语法如下： [对项的操作 for 项 in 可迭代对象]
列表生成式中使用 if 在列表生成式的中，每次迭代的 项 是可以被筛选过滤的，使用 if 关键字。如： [对项的操作 for 项 in 可迭代对象 if 对项的判断]
列表生成式中嵌套 for 列表生成式中的 for 中还可以再嵌套 for。如：[对项1和(或)项2的操作 for 项1 in 可迭代对象1 for 项2 in 可迭代对象2]
字典生成式 便捷地构造列表可以使用列表生成式，同样的，想要通过已有的可迭代对象来便捷地构造字典，可以使用字典生成式。
字典生成式的写法是：{键: 值 for 项 in 可迭代对象}
集合生成式 你可能已经猜到了，只需要将列表生成式的方括号（[]）替换为花括号（{}）即可：{对项的操作 for 项 in 可迭代对象}
生成器表达式 Python 中并没有「元组生成式」！虽然 Python 中确实有类似的圆括号的写法：(对项的操作 for 项 in 可迭代对象)</description>
    </item>
    
    <item>
      <title>结构体操作</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E7%BB%93%E6%9E%84%E4%BD%93%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B8%B8%E7%94%A8/%E7%BB%93%E6%9E%84%E4%BD%93%E6%93%8D%E4%BD%9C/</guid>
      <description>结构体操作 类型转换 比较对比 搜索 查找 统计 替换 删除过滤 大小写转换 前缀后缀 字符串分割 拼接 </description>
    </item>
    
    <item>
      <title>解决提示文件权限被修改问题</title>
      <link>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/4.%E8%A7%A3%E5%86%B3%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E8%A2%AB%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/4.%E8%A7%A3%E5%86%B3%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E8%A2%AB%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</guid>
      <description>解决提示文件权限被修改问题 当执行git diff 命令时出现:
diff --git a/index.php b/index.php old mode 100644 new mode 100755 表示文件权限被修改了， 这时候我们git pull拉取下代码,会提示文件冲突: 例如:
git pull eror: Your local changes to the following files would be overwritten by merge: index.php Please commit your changes or stash them before you merge. Aborting 解决方法 在Git进行代码管理时,如果不想让 Git 记录文件权限，可以通过 Git 配置让其忽略文件权限的信息，参考命令如下：
#当前版本库 git config core.filemode false #所有版本库 git config --global core.fileMode false 当上面的命令被执行之后，就设置了忽略文件权限，此时通过cat查看配置文件.git/config，参考命令如下：
cat .git/config 在配置文件中，如果看到fileMode false则代表配置成功.
这时候再次使用git pull命令更新代码就不会再提示有冲突.</description>
    </item>
    
    <item>
      <title>2.2.6.byte和rune类型</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.6.byte%E5%92%8Crune%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.6.byte%E5%92%8Crune%E7%B1%BB%E5%9E%8B/</guid>
      <description>2.2.6.byte和rune类型 组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：
var a := &#39;中&#39; var b := &#39;x&#39; Go 语言的字符有以下两种：
 uint8类型，或者叫 byte 型，代表了ASCII码的一个字符。 rune类型，代表一个 UTF-8字符。 当需要处理中文、日文或者其他复合字符时，则需要用到rune类型。rune类型实际是一个int32。  Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。
// 遍历字符串 func traversalString() { s := &amp;quot;hello沙河&amp;quot; for i := 0; i &amp;lt; len(s); i++ { //byte fmt.Printf(&amp;quot;%v(%c) &amp;quot;, s[i], s[i]) } fmt.Println() for _, r := range s { //rune fmt.Printf(&amp;quot;%v(%c) &amp;quot;, r, r) } fmt.Println() } 输出:</description>
    </item>
    
    <item>
      <title>2.4.6.continue</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.6.continue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.4.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2.4.6.continue/</guid>
      <description>2.4.6.continue(继续下次循环) continue语句可以结束当前循环，开始下一次的循环迭代过程，仅限在for循环内使用。
在 continue语句后添加标签时，表示开始标签对应的循环。例如：
func continueDemo() { forloop1: for i := 0; i &amp;lt; 5; i++ { // forloop2: for j := 0; j &amp;lt; 5; j++ { if i == 2 &amp;amp;&amp;amp; j == 2 { continue forloop1 } fmt.Printf(&amp;quot;%v-%v\n&amp;quot;, i, j) } } } </description>
    </item>
    
    <item>
      <title>函数进阶</title>
      <link>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/python/%E8%BF%9B%E9%98%B6%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</guid>
      <description>函数进阶 位置参数 位置参数这个东西我们并不陌生，之前所编写的函数使用的就是位置参数。位置参数，顾名思义，传入函数时每个参数都是通过位置来作区分的。函数调用时，传入的值需按照位置与参数一一对应。
def overspeed_rate(current, max, min): if current &amp;gt; max: return (current - max) / max # 超过最大时速，结果为正 elif current &amp;lt; min: return (current - min) / min # 超过最小时速，结果为负 else: return 0 # 不超速，结果为 0 参数默认值 def 函数(参数1, 参数2=默认值): pass 关键字参数 我们还可以在函数调用时，以 参数名=值 的形式来向指定的参数传入值。
overspeed_rate(100, min=80) 任意参数列表 定义函数时，在参数列表中使用 **参数名，可以接收一切关键字参数。类似的，参数列表中使用 *参数名，就可以接受任意数量的非关键字参数，也就是可变参数。 如，计算任意个数的乘积：
def multiply(*nums): result = 1 for n in nums: result *= n return result &amp;gt;&amp;gt;&amp;gt; multiply(1,3,5,7) 105 这个函数能接收任意个参数，这正是 *nums 所发挥的作用。函数所有接收到的非关键字参数组装成一个元组，并绑定到 nums 上。来试验一下：</description>
    </item>
    
    <item>
      <title>忽略指定文件或目录</title>
      <link>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/5.%E5%BF%BD%E7%95%A5%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/0.%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/5.%E5%BF%BD%E7%95%A5%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/</guid>
      <description>忽略指定文件或目录 我们可以在在Git工作区的根目录下创建一个.gitignore文件，把想忽略的文件名或者目录填进去，Git 就会自动忽略这些文件。
vi .gitignore .DS_Store .idea 常见问题   无法添加.gitignore windows系统会出现
  添加忽略文件 .gitignore 文件支持通配符，当你在文件中添加一些忽略规则之后，可能匹配过于宽松，导致某一个文件无法提交到 git ;这个时候你有两种方式来处理，
  或者你发现，可能是 .gitignore 写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
$ git check-ignore -v 文件名 .gitignore:1:.DS_Store .DS_Store Git 会告诉我们，.gitignore 的第 1 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。
除了修改 .gitignore 文件的规则之外还可以使用强制添加的方式:
git add -f .DS_Store </description>
    </item>
    
    <item>
      <title>操作符和分隔符(47个)</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E5%88%86%E9%9A%94%E7%AC%A647%E4%B8%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%A0%87%E8%AF%86%E7%AC%A6/%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E5%88%86%E9%9A%94%E7%AC%A647%E4%B8%AA/</guid>
      <description>操作符和分隔符(47个) 算术运算符(5个) ＋ － ＊ ／ %  位运算符(6个) &amp;amp; | &amp;lt; &amp;amp;^ &amp;gt;&amp;gt; &amp;lt;&amp;lt;  赋值和赋值复核运算符(13个) :＝ ＝ += -= *= /= %= &amp;amp;= |= ^= &amp;amp;^= &amp;gt;&amp;gt;= &amp;lt;&amp;lt;=  比较运算符(6个) &amp;gt; &amp;gt;= &amp;lt; &amp;lt;= == !=  括号(6个) () {} []  逻辑运算符(3个) &amp;amp;&amp;amp; || !  自增自减操作符(2个) ++ -- //go语言里面自增、自减操作符是语句而不是表达式  其他运算符(6个) : , ; . ... &amp;lt;-  </description>
    </item>
    
    <item>
      <title>流量控制语句</title>
      <link>https://ruichengm1987.github.io/docs/shell/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/shell/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid>
      <description>shell基础 Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title>2.2.7.类型转换</title>
      <link>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.7.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/2.golang%E5%9F%BA%E7%A1%80/2.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.2.7.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>2.2.7.类型转换 Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。
强制类型转换的基本语法如下：
T(表达式) 其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.
比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。
func sqrtDemo() { var a, b = 3, 4 var c int // math.Sqrt()接收的参数是float64类型，需要强制转换 c = int(math.Sqrt(float64(a*a + b*b))) fmt.Println(c) } </description>
    </item>
    
    <item>
      <title>函数</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%87%BD%E6%95%B0/</guid>
      <description>函数  函数是一种类型,函数类型变量可以像其他类型变量一样使用,可以作为其他函数的参数或返回值,也可以直接调用执行。 函数支持多值返回 支持闭包 函数支持可变参数  基本概念 函数定义 func funcName(param-list) (result-list) { function-body }  函数的特点 1、函数可以没有输入, 也可以没有返回值(默认返回0) 2、多个相邻的相同类型的参数可以使用简写模式: func add(a, b int) int { //a int, b int 简写为 a,b int return a + b } 3、支持有名的返回值,参数名就相当于函数体内最外层的局部变量，命名返回值变量会被初始化为类型零值， 最后的return可以不带参数名直接返回 func add(a, b int) (sum int) { sum = a + b return //return sum的简写模式 // sum := a + b // 如果是 sum:=a + b, 则相当于新声明一个sum变量命名返回变量sum覆盖 // return sum //最后需要显示的调用return sum } 4、不支持默认值参数 5、不支持函数重载 6、不支持函数嵌套，严格地说是不支持命名函数的嵌套定义，但支持嵌套匿名函数 func add(a, b int) (sum int) { anonymouse := function(x, y int) int { return x + y } return anonymouse(a, b) }  多值返回 func swap(a, b int) (int, int) { return b, a }  实参到形参的传递 package main import &amp;quot;fmt&amp;quot; func chvalue(a int) int { a = a + 1 return a } func chpointer(a *int) { *a = *a + 1 return } func main() { a := 10 chvalue(a) //实参传递给形参是值拷贝 fmt.</description>
    </item>
    
    <item>
      <title>接口</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%8E%A5%E5%8F%A3/</guid>
      <description>接口 语法 type Traversal interface { Traverse() }  duck typing 定义 使用者-&amp;gt;实现者
接口由使用者定义
接口的实现: 接口的实现是隐式的
只要实现接口里的方法
接口的值类型 fmt.printf(&amp;quot;%T, %v&amp;quot;, 接口变量, 接口变量) #打印接口类型和值 // r.(type) r的类型 switch v := r.(type) { case mock.Retriever: case *real.Retrieve: } // type assertion r.(*real.Retruever) 或 r, ok := r.(mock.Retruever) if ok != nil { fmt.Printf(&amp;quot;Err: %s&amp;quot;, ok) } 接口变量里面有什么: * 接口变量自带指针 * 接口变量同样采用值传递, 几乎不需要使用接口的指针 * 指针接收者实现只能以指针方式使用； 值接收者都可以  接口的组合 // 把Retriever和poster接口组合成一个接口 type RetrieverPoster interface { Retriever Poster }  常用接口 string reader writer  </description>
    </item>
    
    <item>
      <title>并发</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%B9%B6%E5%8F%91/</guid>
      <description>并发 进程、线程、协程   进程:
 进程是什么? 一种系统运行行动 进程的定位是什么? 程序的执行实体 进程长什么样子? 在terminal中查看 进程怎么使用? [一般情况]一个程序一个进程, [多进程]一个程序多个进程    线程:
 线程是什么? 运算调度的最小单元 线程的作用是什么? 同时运算多个任务 和进程有什么区别? 大哥和小弟的关系 线程内存大小?
怎么&amp;quot;切&amp;rdquo;? 内核控制
&amp;ldquo;切多大&amp;rdquo;? 缓存+内核控制
&amp;ldquo;等长吗&amp;rdquo;? 不等长 线程观摩  回到我们的terminal 输入命令ps -M [pid] 查看对应pid的线程      协程
 协程(Coroutine)是什么? 轻量级的线程 协程的定位是什么? 用户控制的函数 有什么样的优势? 协程优势  协程的内存消耗更小  一个线程可以包含多个协程 线程大约8MB的内存申请量 协程大概2kb的内存申请量   上下文切换更快  协程少一道手续 线程申请内存, 需要走过内核 协程申请内存，不需要走过内核        灵魂Goroutine</description>
    </item>
    
    <item>
      <title>context</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E5%9F%BA%E7%A1%80%E7%AF%87/context/</guid>
      <description>context 在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务。用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速退出，然后系统才能释放这些 goroutine 占用的资源。
为什么需要Context 基本示例 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) var wg sync.WaitGroup // 初始的例子 func worker() { for { fmt.Println(&amp;quot;worker&amp;quot;) time.Sleep(time.Second) } // 如何接收外部命令实现退出？？？ wg.Done() } func main() { wg.Add(1) go worker() // 如何优雅的实现结束子goroutine？？？ wg.Wait() fmt.Println(&amp;quot;over&amp;quot;) } 全局变量方式 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) var wg sync.WaitGroup var exit bool // 全局变量方式存在的问题： // 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/git/git%E7%A7%BB%E9%99%A4%E5%B7%B2%E7%BB%8Fadd%E7%9A%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/git/git%E7%A7%BB%E9%99%A4%E5%B7%B2%E7%BB%8Fadd%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
      <description>git 移除已经add的文件 使用 git rm 命令即可，有两种选择,  一种是 git rm &amp;ndash;cached “文件路径”，不删除物理文件，仅将该文件从缓存中删除； 一种是 git rm &amp;ndash;f “文件路径”，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。  请问 git rm &amp;ndash;cache 和 git reset HEAD 的区别到底在哪里呢？ 如果要删除文件，最好用 git rm file_name，而不应该直接在工作区直接 rm file_name。
如果一个文件已经add到暂存区，还没有 commit，此时如果不想要这个文件了 有两种方法：
 1，用版本库内容清空暂存区，git reset HEAD 但要慎重使用 2，只把特定文件从暂存区删除，git rm &amp;ndash;cached xxx  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/go%E9%98%85%E8%AF%BB/100.%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BBgo%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/go%E9%98%85%E8%AF%BB/100.%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BBgo%E4%BB%A3%E7%A0%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/%E4%B8%8D%E8%83%BD%E5%8F%96%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/%E4%B8%8D%E8%83%BD%E5%8F%96%E5%9C%B0%E5%9D%80/</guid>
      <description>cannot take address of temporary variables</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/yum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/yum/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/%E6%BA%90%E7%A0%81%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/%E6%BA%90%E7%A0%81%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8C%85/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/rust/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/1.helloworld/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/rust/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/1.helloworld/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/restapi%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/%E6%9E%B6%E6%9E%84%E5%B8%88/restapi%E8%A7%84%E8%8C%83/</guid>
      <description>restapi规范 规范 URI 设计原则  资源必须使用复数名词表示集合，如果该词语没有合适的复数形式，则应该使用单数形式  例如： GET /employees GET /weather 必须使用正斜杠（/）表示层次关系 正斜杠（/）字符用于URI的路径部分，以指示资源之间的层次关系。 例如： GET /employees/56   不应该在URI中使用尾部正斜杠（/）
  应该使用连字符（ - ）来提高URI的可读性，不应该使用下划线（ _ ）
  必须在URI中使用小写字母
  资源包含父子嵌套关系必须遵循以下原则
  如果该资源脱离父资源后没有意义，则如下设计，例如：文件的某行与文件的关系 GET /file/1000/line/20 如果该资源可以独立访问或可以从属于多个父资源，则不用嵌套显示， 例如：专辑和歌曲的关系 GET /albums/151 GET /songs/10 版本控制 由于一个API服务可以提供多个API接口，如果有不兼容和破坏性的更改，版本号将让你能更容易的发布API。版本控制格式约定为：vN（N=1,2,3&amp;hellip;）
例如: GET /api/v1/employees/123 GET /api/v2/employees/123 资源操作 HTTP方法 资源操作必须尽可能使用正确的HTTP方法，并且必须遵守操作幂等性。HTTP方法通常被称为HTTP动词。
   方法 安全 幂等     GET 是 是   POST 否 否   PUT 否 是   DELETE 否 是   PATCH 否 否   OPTIONS 是 是   HEAD 是 是    关于以上方法的说明：</description>
    </item>
    
    <item>
      <title>堆栈</title>
      <link>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/%E5%A0%86%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruichengm1987.github.io/docs/go/readgo/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AF%87/%E5%A0%86%E6%A0%88/</guid>
      <description>堆栈 </description>
    </item>
    
  </channel>
</rss>